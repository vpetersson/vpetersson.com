[
  {
    "sentence": "Hi, welcome to this episode of Nerding up with Victor.",
    "startTime": "00:00",
    "endTime": "00:03",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Today I got a special guest with me, a friend of mine.",
    "startTime": "00:03",
    "endTime": "00:06",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "His name is John and he's from Canonical.",
    "startTime": "00:06",
    "endTime": "00:09",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Hi, John.",
    "startTime": "00:09",
    "endTime": "00:10",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Do you want to say a few words to introduce yourself to the listeners?",
    "startTime": "00:10",
    "endTime": "00:13",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, indeed.",
    "startTime": "00:13",
    "endTime": "00:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So thanks for having me.",
    "startTime": "00:14",
    "endTime": "00:15",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I'm VP of Engineering at Canonical for what we call Enterprise Engineering.",
    "startTime": "00:15",
    "endTime": "00:18",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So in my day job I look after a good portion of Canonical's automation tooling, so juju and the World of Charms, which kind of provide operators for popular open source software.",
    "startTime": "00:19",
    "endTime": "00:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So in my kind of sphere of influence is things like Postgres and MySQL and Prometheus and Loki and Grafana.",
    "startTime": "00:30",
    "endTime": "00:37",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "We have a 5G core kind of suite of automation that we can deploy some machine learning tools, one named kubeflow.",
    "startTime": "00:38",
    "endTime": "00:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so I spent most of my day kind of in the Canonical and Ubuntu ecosystem, working on cloud automation for enterprises, essentially.",
    "startTime": "00:45",
    "endTime": "00:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But my history with open source is relatively long.",
    "startTime": "00:53",
    "endTime": "00:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I was a early days Arch Linux user and kind of even before that, lots of kind of early versions of Ubuntu and Gentoo and various things like that.",
    "startTime": "00:56",
    "endTime": "01:05",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, amazing.",
    "startTime": "01:06",
    "endTime": "01:07",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "01:07",
    "endTime": "01:08",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "There's a lot of interesting stuff that you've been talking about, particularly about juju, which I think we should dive into in a future episode because there's some really cool stuff brewing in the juju space, I think.",
    "startTime": "01:08",
    "endTime": "01:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Cool.",
    "startTime": "01:20",
    "endTime": "01:21",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Interesting enough.",
    "startTime": "01:21",
    "endTime": "01:22",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "In today's episode we will not speak about anything Canonical, but rather about something completely different, which is Nix.",
    "startTime": "01:22",
    "endTime": "01:28",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And you really got me excited about Nix a few months ago.",
    "startTime": "01:29",
    "endTime": "01:34",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Actually it was last year at the Buddha summit, I think you started to really pitching the idea of Nix.",
    "startTime": "01:34",
    "endTime": "01:39",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And in today's episode we're going to cover Nix and we're going to cover a Nix OS Nixon and kind of tie it all together with how you do a dev environment and how you run your, well, local machines really.",
    "startTime": "01:39",
    "endTime": "01:53",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So maybe we can start with Nix and what is Nix and why should we care?",
    "startTime": "01:54",
    "endTime": "02:00",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, indeed.",
    "startTime": "02:00",
    "endTime": "02:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So while I kind of professionally work for Canonical and Ubuntu, I took on the challenge last year of learning Nix and nixos.",
    "startTime": "02:01",
    "endTime": "02:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I'd been kind of hearing a lot about it on podcasts and reading lobsters and such and decided to kind of dive into it.",
    "startTime": "02:08",
    "endTime": "02:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I'm quite captivated by it.",
    "startTime": "02:14",
    "endTime": "02:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So the one thing I would note is that it's probably one of the like most dense technical ecosystems I've ever tried to get into.",
    "startTime": "02:16",
    "endTime": "02:23",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The documentation situation is getting better, but there's quite a lot of movement and so Just trying to get a footing to get started can be quite tough.",
    "startTime": "02:23",
    "endTime": "02:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So firstly, Nix is actually two things.",
    "startTime": "02:31",
    "endTime": "02:33",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So Nix firstly is a functional programming language.",
    "startTime": "02:33",
    "endTime": "02:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I've heard it described as a bit like JSON, but with pure functions.",
    "startTime": "02:36",
    "endTime": "02:40",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It has some similarities to something like Haskell.",
    "startTime": "02:41",
    "endTime": "02:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And Nix is essentially the language that is used to describe packages and system configurations and CI checks and developer environments and kind of anything in the world of Nix.",
    "startTime": "02:45",
    "endTime": "02:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Nix is also a package manager.",
    "startTime": "02:55",
    "endTime": "02:57",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So probably the vast majority of Nix users are consuming the package manager rather than the operating system necessarily.",
    "startTime": "02:57",
    "endTime": "03:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it's been around for a good long time now, I want to say 12, 13 years that I could go wrong.",
    "startTime": "03:04",
    "endTime": "03:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And Nix packages, which is the kind of GitHub repository which stores all of the definitions for the packages, is I believe, the largest Linux package repository in the world.",
    "startTime": "03:11",
    "endTime": "03:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's actually bigger than the Arch Repositories and the AUR combined.",
    "startTime": "03:20",
    "endTime": "03:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if you're looking for a piece of software, the chances of it being available with Nix is pretty high.",
    "startTime": "03:25",
    "endTime": "03:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And similar to some of the things I do in my professional life, it's kind of operating system cross platform.",
    "startTime": "03:30",
    "endTime": "03:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you can install Nix on macOS, you can install it on any Linux, and that package collection sort of becomes automatically available to you.",
    "startTime": "03:36",
    "endTime": "03:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So the way it kind of like loosely hangs together is that using the Nix language, you write derivations which output packages, right?",
    "startTime": "03:46",
    "endTime": "03:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So derivations you can think of as like a blueprint for a package.",
    "startTime": "03:55",
    "endTime": "03:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And one of the interesting things about Nix is it has this kind of feature of reproducibility by default.",
    "startTime": "04:00",
    "endTime": "04:05",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it will do that trickery, you see, in the file system where everything was, you know, starting at the UNIX epoch and such.",
    "startTime": "04:05",
    "endTime": "04:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And the idea is that a derivation should build exactly the same on any given machine, right?",
    "startTime": "04:12",
    "endTime": "04:17",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it's a very portable way to build packages for different systems.",
    "startTime": "04:17",
    "endTime": "04:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Are they fully reproducible or are they.",
    "startTime": "04:20",
    "endTime": "04:23",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "That's a great question.",
    "startTime": "04:24",
    "endTime": "04:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I guess it depends on how far down the rabbit hole you go.",
    "startTime": "04:25",
    "endTime": "04:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mean, they're pretty reproducible in the sense that.",
    "startTime": "04:27",
    "endTime": "04:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I don't know, I don't know.",
    "startTime": "04:30",
    "endTime": "04:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "In fact, they must be to an extent.",
    "startTime": "04:33",
    "endTime": "04:35",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So part of the package building process is you have to define a hash for the sources of the package.",
    "startTime": "04:35",
    "endTime": "04:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And in cases for things like Node JS packages or Rust packages or Go packages, you not only have to define a hash for the source code that you're fetching to build the package with, you then define a sort of intermediate hash of all of the vendor dependencies, whether that's Node Modules or the Cargo Packages or go modules, whatever it is.",
    "startTime": "04:41",
    "endTime": "05:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I'm pretty sure, yes, I, I, I, I'm sure I have read somewhere on a NIX forum an effort to make it even more reproducible.",
    "startTime": "05:01",
    "endTime": "05:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I can't claim to be an expert on exactly what that nuance is, but to all intents and purposes, yes, packages are reproducible.",
    "startTime": "05:09",
    "endTime": "05:15",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Fair enough.",
    "startTime": "05:16",
    "endTime": "05:16",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I, that's, I mean, I don't want to derail the introduction too much to nix, but it definitely sound like it solves some of the SBOM issues and supply chain issues by doing that level of pinning as well.",
    "startTime": "05:16",
    "endTime": "05:29",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It does.",
    "startTime": "05:29",
    "endTime": "05:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And it also solves the kind of dependency hell issues that we've seen for kind of years with different Linux distributions.",
    "startTime": "05:30",
    "endTime": "05:37",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So Canonical tried to solve this or are solving this to an extent with snapd and snaps, right, where you might have 10 different pieces of software that depend on 10 different versions of Glibc.",
    "startTime": "05:38",
    "endTime": "05:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And in the times of old that was difficult, right?",
    "startTime": "05:48",
    "endTime": "05:51",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like you had to do lots of trickery in your file system and lots of different build environments and compilation.",
    "startTime": "05:51",
    "endTime": "05:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Nix kind of makes that a first class problem that it will solve.",
    "startTime": "05:55",
    "endTime": "06:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So the way it works is every single package, every dependency, can exist in multiple forms on your machine at a given path, right?",
    "startTime": "06:00",
    "endTime": "06:07",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So all of the packages and libraries and things that you download with nix going to a place in the file system called the Nix store, and they have these kind of unique names.",
    "startTime": "06:07",
    "endTime": "06:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So each revision, each version of a package, whether that contains a library or an application, has kind of a long hash and then the name and version of the thing, which means you could have 10 versions of glibc 2.38, all with slightly different hashes because they've perhaps been built slightly differently, perhaps with a different set of compiler flags or whatever it is.",
    "startTime": "06:16",
    "endTime": "06:35",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then the applications that depend on those kind of are patched automatically to link to the right versions that were specified in its derivation.",
    "startTime": "06:35",
    "endTime": "06:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And the kind of magic of nix is in taking care of that automatic patching of applications and making sure that libraries are all resolved from the right places and that kind of thing.",
    "startTime": "06:42",
    "endTime": "06:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So, so it's very different than.",
    "startTime": "06:53",
    "endTime": "06:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It just brings me down memory lane of Gen 2 in the early days where they solved that kind of by compiling everything from source, which is, I guess they still do, I guess it's still active and people are still using it, but they solve it, they solve that by compiling everything.",
    "startTime": "06:56",
    "endTime": "07:11",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So you compile from scratch and then here you start link versus link against specific hashes and yes and no, right?",
    "startTime": "07:11",
    "endTime": "07:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So with Nix you can build all of the packages from source, so you can go get yourself a Nixos machine and build all of the package.",
    "startTime": "07:19",
    "endTime": "07:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So the derivations that exist in Nix packages, you can elect to build them yourself.",
    "startTime": "07:26",
    "endTime": "07:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "They also run a thing called the binary cache, which means that if your machine, if you allow it to, which most people probably do by default.",
    "startTime": "07:31",
    "endTime": "07:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "07:38",
    "endTime": "07:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If you, if your machine looks for a given dependency, it will first check the binary cache and say, okay, do I have something that looks like that Nix store path in the binary cache?",
    "startTime": "07:38",
    "endTime": "07:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And if so, it'll download the right version for your kind of processor architecture and operating system and just unpack it.",
    "startTime": "07:46",
    "endTime": "07:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If it can't find something in the binary cache, then it will build it from source by default.",
    "startTime": "07:52",
    "endTime": "07:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So, similar to how, and I was going to ask you like, about comparing it to Homebrew or Brew, it's similar in that sense as well.",
    "startTime": "07:56",
    "endTime": "08:04",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I believe Homebrew has a very similar logic.",
    "startTime": "08:04",
    "endTime": "08:07",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It tries to pull binaries and if it doesn't have one, it then.",
    "startTime": "08:07",
    "endTime": "08:10",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, indeed.",
    "startTime": "08:10",
    "endTime": "08:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Back to compare.",
    "startTime": "08:10",
    "endTime": "08:11",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Compiling.",
    "startTime": "08:11",
    "endTime": "08:12",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "08:12",
    "endTime": "08:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Okay, perfect.",
    "startTime": "08:12",
    "endTime": "08:14",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So let's go through some of the core concepts in Nix.",
    "startTime": "08:14",
    "endTime": "08:18",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I think there are Flakes and then there are some other things you want to go through some of the core building blocks.",
    "startTime": "08:18",
    "endTime": "08:23",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "08:24",
    "endTime": "08:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I think flakes are kind of a new and they are defined as an experimental feature at the moment.",
    "startTime": "08:24",
    "endTime": "08:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "They've been around for years as far as I can tell, but there's no.",
    "startTime": "08:30",
    "endTime": "08:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The community has yet to reach consensus on exactly what that experience should be and the features it should have.",
    "startTime": "08:34",
    "endTime": "08:40",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Safe to say I've been using flakes to run or all of my machines and build my software for the last year and nothing has changed to the extent where I've had to make any changes to my code.",
    "startTime": "08:40",
    "endTime": "08:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I would say if you're going to get into Nix today, my opinion is that you should invest in that ecosystem.",
    "startTime": "08:49",
    "endTime": "08:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There are a couple of kind of small corporate entities around Nix and nixos who are peddling it quite hard and I think for good reason.",
    "startTime": "08:56",
    "endTime": "09:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So flakes, I mean at a very fundamental level, a flake is really just a directory that has a flake mix file and a flake lock file.",
    "startTime": "09:03",
    "endTime": "09:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And Flakes essentially outputs Nix expressions that others can use for building packages, building modules, accessing developer shells, all sorts of things.",
    "startTime": "09:12",
    "endTime": "09:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it's basically a mechanism to share code, share Nix code.",
    "startTime": "09:22",
    "endTime": "09:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "09:26",
    "endTime": "09:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so if you're the developer of some open source application, you could include a flake nix file and anyone would be able to point their nix Package Manager at your GitHub repo with the flake nix in it.",
    "startTime": "09:26",
    "endTime": "09:37",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And it would then learn how to build the package, get a developer shell, perhaps there's a nixos module that you've included.",
    "startTime": "09:37",
    "endTime": "09:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It just makes it very easy to kind of use things from around the Nix ecosystem.",
    "startTime": "09:44",
    "endTime": "09:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And the other thing it brings is this concept of a lock file, which is very similar to your kind of package lock, cargo, lock file, go, some file.",
    "startTime": "09:49",
    "endTime": "09:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "09:56",
    "endTime": "09:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's a way of saying this set of NIX expressions expects, you know, NIX packages at this SHA hash as an input.",
    "startTime": "09:57",
    "endTime": "10:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "10:06",
    "endTime": "10:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so that's, you know, towards kind of reproducibility.",
    "startTime": "10:06",
    "endTime": "10:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "10:09",
    "endTime": "10:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You're not going to get, okay, well know IAPPED installed on this day and the version changed and now my build doesn't work.",
    "startTime": "10:09",
    "endTime": "10:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can kind of say, no.",
    "startTime": "10:14",
    "endTime": "10:15",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like this flake expects exactly this slice of the NIX packages history to build, and thus it should be reproducible.",
    "startTime": "10:15",
    "endTime": "10:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "10:21",
    "endTime": "10:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Okay.",
    "startTime": "10:22",
    "endTime": "10:23",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And one thing that I guess I spoke to some people about this a little bit about is obviously there are some shared features that with Docker in the sense of how you can run it in some ways, but it's also very different.",
    "startTime": "10:23",
    "endTime": "10:38",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So maybe we can zoom in a little bit on how it compares to Docker.",
    "startTime": "10:38",
    "endTime": "10:42",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And then perhaps a more interesting one is how we could use NIX inside of Docker to build Docker images to make them more reproducible and more tightly controlled, I guess.",
    "startTime": "10:42",
    "endTime": "10:54",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "10:55",
    "endTime": "10:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So there are some parallels.",
    "startTime": "10:55",
    "endTime": "10:57",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mean, Docker is primarily used these days as a means for packaging applications with their dependencies.",
    "startTime": "10:57",
    "endTime": "11:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And certainly you can do that with a Flake or with a NIX package.",
    "startTime": "11:02",
    "endTime": "11:05",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "What you don't get by default with a NIX package is containerization.",
    "startTime": "11:05",
    "endTime": "11:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "11:08",
    "endTime": "11:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Which clearly you get with Docker.",
    "startTime": "11:08",
    "endTime": "11:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Certainly the way I run a little home server with Nix, and the way I that used to be Docker Compose, and then it was microk8s for a while, and now it is just Nix running a bunch of nixos modules that are either available publicly or that I maintain as part of my flake.",
    "startTime": "11:11",
    "endTime": "11:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you don't get the containerization by default, though there are ways to kind of declaratively define containers that you want to run as part of a NIX system.",
    "startTime": "11:25",
    "endTime": "11:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The other thing you can do is you can use NIX derivations to build other artifacts from NIX packages.",
    "startTime": "11:34",
    "endTime": "11:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "11:41",
    "endTime": "11:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So an example of that is you can use a NIX derivation to build a Docker image.",
    "startTime": "11:41",
    "endTime": "11:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "11:46",
    "endTime": "11:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So literally the output of that derivation is an OCI image which is built, which has only the paths in it needed to Run the things that you want to put in it.",
    "startTime": "11:46",
    "endTime": "11:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "11:56",
    "endTime": "11:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So a little bit like the distroless type containers, right?",
    "startTime": "11:56",
    "endTime": "11:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You could have just the, you know, inside that image, it would have just the bits of the NIX store that are needed to run your package, right.",
    "startTime": "11:59",
    "endTime": "12:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then your package itself.",
    "startTime": "12:06",
    "endTime": "12:07",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Or you can use a Docker file as normal and you could start from a Ubuntu based image and install the NIX package manager in that image and then do your work in there and do multi stage builders.",
    "startTime": "12:08",
    "endTime": "12:18",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "12:18",
    "endTime": "12:18",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you can kind of docker images a couple of different ways.",
    "startTime": "12:18",
    "endTime": "12:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "With Nix, you can do it kind of from the outside or from the inside, if that makes sense.",
    "startTime": "12:21",
    "endTime": "12:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "12:25",
    "endTime": "12:25",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So I guess if you were to do that in, if you thinking about it develop environment, you would probably use the Nix file to run things locally outside Docker.",
    "startTime": "12:25",
    "endTime": "12:36",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But when you're pushing it in CI cd, you would output that to a Docker file, which then you can consume in your cluster.",
    "startTime": "12:36",
    "endTime": "12:43",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I mean, one of the really nice things that I like, I personally enjoy about the Nix ecosystem is the Nix package manager has this concept of running a package without ever installing it.",
    "startTime": "12:44",
    "endTime": "12:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I did this just a couple of days ago.",
    "startTime": "12:53",
    "endTime": "12:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I was listening to a podcast that was extolling the virtues of a process manager thing called bottom.",
    "startTime": "12:55",
    "endTime": "13:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like top, right, but bottom.",
    "startTime": "13:00",
    "endTime": "13:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I wanted to try it out.",
    "startTime": "13:02",
    "endTime": "13:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I didn't necessarily want to install it.",
    "startTime": "13:03",
    "endTime": "13:05",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I literally typed nix space, run NIX packages bottom.",
    "startTime": "13:05",
    "endTime": "13:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And it just went and fetched that thing into my Nix store and ran the program.",
    "startTime": "13:10",
    "endTime": "13:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And when I press Ctrl C it's gone, right?",
    "startTime": "13:14",
    "endTime": "13:17",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like the files are still in the next store, but they'll get garbage collected on some interval or the next time I clean it.",
    "startTime": "13:17",
    "endTime": "13:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And if I want to install it, I can then go and put that package in my system configuration if I never want to see it again.",
    "startTime": "13:22",
    "endTime": "13:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "No harm done, right?",
    "startTime": "13:27",
    "endTime": "13:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And the same can be done with development shells.",
    "startTime": "13:28",
    "endTime": "13:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I set up as part of my, the flicks that I put in my projects, I'll have a development shell set up which says, actually I want a Z shell with, I don't know, the go toolchain built into it plus golang CI plus GO releaser.",
    "startTime": "13:30",
    "endTime": "13:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so when I CV into that directory, I type mix develop and it drops me into a shell that has all of those things good to go.",
    "startTime": "13:44",
    "endTime": "13:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And when I'm done, I just exit that shell and those tools are no longer in my path.",
    "startTime": "13:49",
    "endTime": "13:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "13:52",
    "endTime": "13:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so you can have these nice kind of isolated developer environments.",
    "startTime": "13:52",
    "endTime": "13:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can have a rustic developer environment for your rust Project a GO developer environment for your GO project.",
    "startTime": "13:55",
    "endTime": "14:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And that can include packages, dot files, environment variables, like whatever you can think of.",
    "startTime": "14:00",
    "endTime": "14:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can kind of package up these like portable developer environments for all of your projects.",
    "startTime": "14:04",
    "endTime": "14:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That's, that's very beautiful in particular for Python, I guess it's a bit of notorious for versions and packages and you might, with even within your project, you might use different version of Python and definitely different sub module packages.",
    "startTime": "14:09",
    "endTime": "14:24",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right?",
    "startTime": "14:24",
    "endTime": "14:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "14:25",
    "endTime": "14:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So having that package that way sounds like a very clean of doing it so you don't have to pollute your entire system.",
    "startTime": "14:25",
    "endTime": "14:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And also sounds more manageable than VMs or virtual environments that Python is heavily leveraging.",
    "startTime": "14:31",
    "endTime": "14:38",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Normally, yeah, the thing that you get.",
    "startTime": "14:38",
    "endTime": "14:40",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And we'll come on to nixos a little bit later, but the thing that, the way that the Nix package manager manages things is you don't.",
    "startTime": "14:40",
    "endTime": "14:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You end up with much less of this feeling of like craft accumulating on your machine over time.",
    "startTime": "14:45",
    "endTime": "14:50",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like if you ever managed a Debian system or Uvanti system or Arch system, even if you're really, you know, competent and careful and meticulous, if you install and uninstall a bunch of packages over a period of five years, there will inevitably be stuff lying around on the machine.",
    "startTime": "14:50",
    "endTime": "15:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "15:03",
    "endTime": "15:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That you don't necessarily want.",
    "startTime": "15:03",
    "endTime": "15:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can kind of escape that with Nixos.",
    "startTime": "15:04",
    "endTime": "15:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You don't really have that situation because of the way the next store is on the file system and the way it can be kind of garbage collected and cleaned out.",
    "startTime": "15:06",
    "endTime": "15:13",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You, you kind of have this feeling of a very fresh machine which only has what you've asked for at any given moment.",
    "startTime": "15:13",
    "endTime": "15:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, I love the concept of that because I can definitely relate to the problem.",
    "startTime": "15:21",
    "endTime": "15:26",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But let's.",
    "startTime": "15:27",
    "endTime": "15:28",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So you helped me out with getting the screenly CLI ported to Nix.",
    "startTime": "15:28",
    "endTime": "15:34",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Do you want to do a bit of a show and tell of how it works and basically bootstrap a Nix setup from zero, really, to the screenly CLI installed and I'm going to perhaps unpack what that actually does.",
    "startTime": "15:35",
    "endTime": "15:48",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, certainly.",
    "startTime": "15:49",
    "endTime": "15:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if you look at my screen now, I've started a fresh Ubuntu VM with a tool called Multipass, which is something that I look after in my day job.",
    "startTime": "15:50",
    "endTime": "15:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So Multipass is just a nice quick way to get Ubuntu instance on any machine.",
    "startTime": "15:58",
    "endTime": "16:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if I just jump into that machine, I'm now on a fresh.",
    "startTime": "16:03",
    "endTime": "16:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "A fresh Ubuntu machine.",
    "startTime": "16:08",
    "endTime": "16:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "16:09",
    "endTime": "16:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The first thing you'll want to do in order to use next is obviously install the package manager Itself.",
    "startTime": "16:11",
    "endTime": "16:15",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mentioned a couple of sort of commercial entities that work around Nix.",
    "startTime": "16:15",
    "endTime": "16:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "One of them is determinate systems who are relatively new player, and they've put out a Nix installer which is written in Rust, which is kind of opinionated and comes with a whole bunch of the defaults that I appreciate.",
    "startTime": "16:19",
    "endTime": "16:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like it enables flakes by default.",
    "startTime": "16:29",
    "endTime": "16:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It, you know, does all the things that I would probably do myself.",
    "startTime": "16:31",
    "endTime": "16:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So that's a single kind of cult of bash as ever.",
    "startTime": "16:34",
    "endTime": "16:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But that will get you up and running with the nix package manager on a Mac, on a Steam Deck, on a Linux machine, in CI.",
    "startTime": "16:39",
    "endTime": "16:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Doesn't matter what it is.",
    "startTime": "16:44",
    "endTime": "16:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like if nix can be installed on, this is probably the way that you want to get it.",
    "startTime": "16:45",
    "endTime": "16:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So once it's installed, we're just going to source the nix daemon file, which just places the nix package manager in the path.",
    "startTime": "16:50",
    "endTime": "16:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And now we have access to the nix command, right?",
    "startTime": "16:55",
    "endTime": "16:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is just a plain, at this point, plain Ubuntu machine with the Nix package manager installed.",
    "startTime": "17:00",
    "endTime": "17:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "One of the things that you can do with Nix I mentioned about running packages that you don't have installed on your machine is I could just run the screenly clique.",
    "startTime": "17:05",
    "endTime": "17:13",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I happen to know the package name is screeny cli.",
    "startTime": "17:13",
    "endTime": "17:15",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So nix run and then you kind of say like repository hash name of package.",
    "startTime": "17:15",
    "endTime": "17:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The default is the nix packages repository.",
    "startTime": "17:21",
    "endTime": "17:23",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if I run that command, it's now going to go off and fetch the latest versions of nix packages, figure out what to do, go and get the latest version of that package and run it, right?",
    "startTime": "17:23",
    "endTime": "17:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It'll run the default command.",
    "startTime": "17:31",
    "endTime": "17:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So there you go, that's the screenly cli.",
    "startTime": "17:32",
    "endTime": "17:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I can do whatever that might be, right?",
    "startTime": "17:34",
    "endTime": "17:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I can pass help to it.",
    "startTime": "17:36",
    "endTime": "17:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like I can just use the screenly clique as if it was installed on my machine.",
    "startTime": "17:38",
    "endTime": "17:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The other option is I could do nix shell, right?",
    "startTime": "17:42",
    "endTime": "17:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So nix packages screenly cli.",
    "startTime": "17:46",
    "endTime": "17:50",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is going to drop me into a shell where the screenly CLI is now in my path.",
    "startTime": "17:50",
    "endTime": "17:54",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So now I can just be.",
    "startTime": "17:54",
    "endTime": "17:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If I could remember what the name of the command is, it's just screen there.",
    "startTime": "17:56",
    "endTime": "17:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Thanks.",
    "startTime": "17:58",
    "endTime": "17:59",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "There you go.",
    "startTime": "17:59",
    "endTime": "17:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So now it's in my path, right?",
    "startTime": "17:59",
    "endTime": "18:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I can use screenly as normal.",
    "startTime": "18:01",
    "endTime": "18:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then when I'm done with this shell and I don't need access anymore, I can pop out the shell and you can see that screenly is gone.",
    "startTime": "18:04",
    "endTime": "18:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The interesting thing is it does stick around in the file system, right?",
    "startTime": "18:10",
    "endTime": "18:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if I take a look at the NIX store, you can see that we still have the output of these derivations in the file system.",
    "startTime": "18:14",
    "endTime": "18:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is essentially what was downloaded from the nix packages repository.",
    "startTime": "18:24",
    "endTime": "18:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And if you were looking to there, you kind of see like a very minimal root file system that has like bin slash, user, whatever.",
    "startTime": "18:28",
    "endTime": "18:35",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like imagine like just a snap, a slice of the file system that contains the things that package needs, right?",
    "startTime": "18:35",
    "endTime": "18:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So under the hood, what happens when you pop in to that environment?",
    "startTime": "18:42",
    "endTime": "18:45",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Is it a chroot environment or actually what's technical mechanism that should happen?",
    "startTime": "18:46",
    "endTime": "18:51",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It is basically a whole bunch of path, variable mangling and ldpreload and these sorts of things, right?",
    "startTime": "18:51",
    "endTime": "18:57",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So these binaries, the screenly binary will have been built and patched at build time.",
    "startTime": "18:57",
    "endTime": "19:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it will already be pointing at the right versions of libc.",
    "startTime": "19:02",
    "endTime": "19:05",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if we look at the rest of the next store, just to give you an idea, you can see there's all kinds of stuff in here, right?",
    "startTime": "19:05",
    "endTime": "19:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you've got Python setup tools, you've got cargo, you've got all kinds of things in here, right?",
    "startTime": "19:10",
    "endTime": "19:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like this is essentially all of the packages you would need to run a very tiny little Linux distribution.",
    "startTime": "19:16",
    "endTime": "19:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And the way when you build a nix derivation, it will take care of making sure that those packages know which other packages they depend on and point to them in the right places, whether that be through path.",
    "startTime": "19:21",
    "endTime": "19:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And it also makes extensive uses of wrappers, right?",
    "startTime": "19:31",
    "endTime": "19:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So they are some applications that you kind of have to wrap and kind of explicitly export the path to say like, okay, one of the things you depend on is over here and over there.",
    "startTime": "19:34",
    "endTime": "19:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But the nix sort of package ecosystem provides tools that can build those wrappers for you.",
    "startTime": "19:44",
    "endTime": "19:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I can show you an example of this in a little while.",
    "startTime": "19:49",
    "endTime": "19:51",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, so because it's very different from LXC and Docker.",
    "startTime": "19:51",
    "endTime": "19:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Why particularly Docker?",
    "startTime": "19:56",
    "endTime": "19:58",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So it doesn't leverage C groups or anything like that or not at this level.",
    "startTime": "19:58",
    "endTime": "20:02",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "No, I mean those constructs will available to you in nixos.",
    "startTime": "20:02",
    "endTime": "20:05",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "20:05",
    "endTime": "20:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But this is just about essentially going, getting, running the package.",
    "startTime": "20:06",
    "endTime": "20:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The other thing we could do is we could talk a little bit about the development environment stuff I talked about.",
    "startTime": "20:10",
    "endTime": "20:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yes, so if we do, if we clone the screenly repository CLI and we jump into that directory.",
    "startTime": "20:14",
    "endTime": "20:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is just the upstream repository and you can see in there's a flake lix and I can now just run if I just for the sake of argument, just show you that I don't have cargo installed on this machine, right?",
    "startTime": "20:24",
    "endTime": "20:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I have none of the rust dependencies.",
    "startTime": "20:36",
    "endTime": "20:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If I wanted to work on your project, I can now type mix, develop and that's going to read the Flake definition, which I'll show in a moment.",
    "startTime": "20:38",
    "endTime": "20:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's going to go figure out what all the packages are that are needed for the development shell for this project, download and or build them, and then drop me into a shell where they're all present.",
    "startTime": "20:44",
    "endTime": "20:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is currently downloading Cargo and the Rust compiler and all the various other things which should be done relatively quick.",
    "startTime": "20:53",
    "endTime": "20:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And now you can see I can run cargo build and it's going to go build your project for me.",
    "startTime": "20:59",
    "endTime": "21:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I've got all the stuff I need in my path.",
    "startTime": "21:04",
    "endTime": "21:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Good to go.",
    "startTime": "21:06",
    "endTime": "21:07",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That's very elegant.",
    "startTime": "21:07",
    "endTime": "21:08",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And so you can imagine if you're a team of people who work on a project, you no longer have to have these kind of like protracted developer setup guides.",
    "startTime": "21:09",
    "endTime": "21:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You just say install the Nix package manager, clone the thing and type next developer and you're good to go.",
    "startTime": "21:16",
    "endTime": "21:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "21:21",
    "endTime": "21:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like that's right.",
    "startTime": "21:21",
    "endTime": "21:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That's the kind of deal.",
    "startTime": "21:22",
    "endTime": "21:23",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I won't let that build all the way through.",
    "startTime": "21:25",
    "endTime": "21:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There's a couple of things that probably take a little while.",
    "startTime": "21:26",
    "endTime": "21:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If I just take a quick look at what that actually looks like, I'll jump out because the VIM on my actual machine is a little bit nicer configured than that fresh Ubuntu.",
    "startTime": "21:29",
    "endTime": "21:39",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So we look in here.",
    "startTime": "21:39",
    "endTime": "21:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is that repository that we talked about.",
    "startTime": "21:42",
    "endTime": "21:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And if we take a look at the Flake Lix, this is essentially how I package screenly, right?",
    "startTime": "21:45",
    "endTime": "21:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I chose to use Flake straight away.",
    "startTime": "21:49",
    "endTime": "21:51",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is the kind of input specification I was talking about.",
    "startTime": "21:51",
    "endTime": "21:54",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this basically says this Flake is expecting to build against the Nixos 2311 release set of packages.",
    "startTime": "21:54",
    "endTime": "22:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "23.11 was just released a couple of weeks ago.",
    "startTime": "22:03",
    "endTime": "22:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It has the kind of inbuilt notion of building for different packages in architectures that will handle cross compilation and all that for you.",
    "startTime": "22:07",
    "endTime": "22:13",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You don't have to try and figure out what that means.",
    "startTime": "22:13",
    "endTime": "22:15",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You just tell it the architect as you want and it'll make it happen.",
    "startTime": "22:15",
    "endTime": "22:18",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then this is the actual package derivation.",
    "startTime": "22:19",
    "endTime": "22:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I talked about derivations.",
    "startTime": "22:21",
    "endTime": "22:23",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The next language can feel a little bit obtuse to start with, I will concede.",
    "startTime": "22:24",
    "endTime": "22:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But you can see here the Nix community have provided this kind of wrapper for building Rust packages, which takes care of going and fetching cargo dependencies and putting them in the right place.",
    "startTime": "22:29",
    "endTime": "22:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So essentially you just give it a package name.",
    "startTime": "22:38",
    "endTime": "22:40",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I've told it the source is in this current directory.",
    "startTime": "22:41",
    "endTime": "22:43",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I've told it where the cargo Lock file is.",
    "startTime": "22:43",
    "endTime": "22:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So as part of the build process, it will go and download the exact version of all of the Rust dependencies it needs and vendor them into the next store so that they are good to go.",
    "startTime": "22:45",
    "endTime": "22:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Your build happens to need package config and believe it or not, Perl, that's part of the open SSL cargo package, it turns out.",
    "startTime": "22:53",
    "endTime": "23:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then there's a whole bunch of extra stuff that's needed for the Apple variant, and that's essentially it.",
    "startTime": "23:01",
    "endTime": "23:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can run like all of the rest of it in terms of how to run cargo, build and patch the binaries to look for the right libraries in the next store is all done for you.",
    "startTime": "23:06",
    "endTime": "23:13",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right, that's it.",
    "startTime": "23:13",
    "endTime": "23:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This is all just metadata, essentially.",
    "startTime": "23:14",
    "endTime": "23:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And this is pretty much exactly word for word what it looks like in the upstream Nix packages repository, with the exception that the source block tells it to fetch from GitHub in that case and not from the current directory.",
    "startTime": "23:17",
    "endTime": "23:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right, very cool.",
    "startTime": "23:28",
    "endTime": "23:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And if were hypothetically were to add Docker as a target rather than just a binary, how much work would.",
    "startTime": "23:29",
    "endTime": "23:38",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "That be in terms of probably two or three lines.",
    "startTime": "23:38",
    "endTime": "23:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You essentially have another output for the flake, and there's some Docker tools that are part of the kind of Nix packages repository.",
    "startTime": "23:42",
    "endTime": "23:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Basically say, like, build me a Docker image with that package and it will output you a Docker image.",
    "startTime": "23:48",
    "endTime": "23:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Oh, wow.",
    "startTime": "23:52",
    "endTime": "23:53",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "That is really that simple?",
    "startTime": "23:53",
    "endTime": "23:55",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Okay, I don't have an example of that to show you, but it really is like two or three lines of code tops.",
    "startTime": "23:55",
    "endTime": "24:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The development shell.",
    "startTime": "24:00",
    "endTime": "24:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This is the development shell I was talking about.",
    "startTime": "24:02",
    "endTime": "24:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this basically says the default development shell for this flake is called screenly cli.",
    "startTime": "24:04",
    "endTime": "24:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Set some environment config to ensure that flakes are always enabled, and it basically will derive the set of packages it needs from the set of inputs that the package derivation takes.",
    "startTime": "24:10",
    "endTime": "24:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I've said give me a shell that has all of the packages that are needed to build that Nix package that we just defined up there.",
    "startTime": "24:20",
    "endTime": "24:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I can add other things in here, right?",
    "startTime": "24:25",
    "endTime": "24:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like I could say, I also want H top vim and I don't know, Proto Buff and all of the other stuff, whatever it is you might want.",
    "startTime": "24:27",
    "endTime": "24:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then anyone who ever type Nix developed would get those things automatically available in their path.",
    "startTime": "24:34",
    "endTime": "24:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "24:38",
    "endTime": "24:39",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That's super clean and I presume dev shell and the default navshell, those are standard building blocks in Nix.",
    "startTime": "24:39",
    "endTime": "24:47",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It's not something that is custom here, but it's actually why.",
    "startTime": "24:47",
    "endTime": "24:50",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "No.",
    "startTime": "24:50",
    "endTime": "24:50",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So there's a.",
    "startTime": "24:50",
    "endTime": "24:51",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "There's essentially a.",
    "startTime": "24:51",
    "endTime": "24:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There's a Schema for what a flake NIX can output.",
    "startTime": "24:53",
    "endTime": "24:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it can output, among other things, it can output packages, overlays, nixos modules, nixos machine configurations, development shells, checks, and so in each of those categories it can have a default.",
    "startTime": "24:56",
    "endTime": "25:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So when you just say Nix develop and nothing else, you'll get the default shell.",
    "startTime": "25:08",
    "endTime": "25:13",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If you type nix build and just point at the flake, it will build the default package.",
    "startTime": "25:13",
    "endTime": "25:17",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "25:18",
    "endTime": "25:18",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But you can have other things, other packages.",
    "startTime": "25:18",
    "endTime": "25:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I have an example I can show in a moment, which has lots and lots of different packages in it.",
    "startTime": "25:19",
    "endTime": "25:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "25:24",
    "endTime": "25:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Because there's only one application in here, it just makes sense to make the default screen cli.",
    "startTime": "25:24",
    "endTime": "25:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "25:29",
    "endTime": "25:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Sure, sure.",
    "startTime": "25:30",
    "endTime": "25:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "No, that's really cool.",
    "startTime": "25:32",
    "endTime": "25:33",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "You, you mentioned Nix OS a few times.",
    "startTime": "25:33",
    "endTime": "25:37",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Should we switch gear and talk a bit about Nix os?",
    "startTime": "25:38",
    "endTime": "25:41",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, let's do that.",
    "startTime": "25:41",
    "endTime": "25:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So Nix OS is fundamentally just a Linux distribution that is based upon the Nix package manager and the kind of principles that it enforces.",
    "startTime": "25:42",
    "endTime": "25:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it is what you would describe as an immutable operating system in that large portions of the file system are mounted, read only when it boots.",
    "startTime": "25:52",
    "endTime": "25:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And you can't just go hacking around in etc or whatever, you have to.",
    "startTime": "25:59",
    "endTime": "26:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The way you mutate the system configuration is by mutating a set of NIX files and then rebuilding the kind of system from that, like generating the system from that.",
    "startTime": "26:02",
    "endTime": "26:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And Nix OS has these, has this concept of generation.",
    "startTime": "26:12",
    "endTime": "26:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So every time you make a material change to the machine configuration, it will build a new generation and the old one will stick around, which means if you break something, you can revert back to it will just boot the last generation because it's all based on essentially a pile of symlinks.",
    "startTime": "26:14",
    "endTime": "26:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So one of the weird things about nixos is it throws all of the rules of the standard kind of Unix file hierarchy system out of the window.",
    "startTime": "26:29",
    "endTime": "26:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so one of the challenges, and one of the reasons the Nix package manager has all of this magic for automatically patching binaries and injecting, you know, creating wrappers that set the path variable, is because on an XOS machine, like for example, User Bin Bash doesn't exist.",
    "startTime": "26:37",
    "endTime": "26:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like LIBC is not where you would expect it to be, it is in the next store and it is symlinked into place.",
    "startTime": "26:54",
    "endTime": "26:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But as a result of that, you get really fine grained control.",
    "startTime": "27:00",
    "endTime": "27:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I can give you an example if I take a look at how my machines are defined, which we'll jump into in just a sec.",
    "startTime": "27:04",
    "endTime": "27:15",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But essentially you have this declarative by nature operating system and that declarative kind of nature goes all the way down in my case to file systems bootloaders.",
    "startTime": "27:16",
    "endTime": "27:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I have everything on all of my machines completely defined, literally how the disks are partitioned, how the bootloader is laid down, how the firmware is updated on the machine, right through to what fancy configuration do I want in Neo Fetch so I can post it on Reddit.",
    "startTime": "27:27",
    "endTime": "27:43",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "27:43",
    "endTime": "27:43",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like the dot files for Vim, the.",
    "startTime": "27:43",
    "endTime": "27:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The extensions I have installed in Chrome, the packages I have available in various different environments.",
    "startTime": "27:46",
    "endTime": "27:51",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "27:51",
    "endTime": "27:51",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "All defined in code checked into Git.",
    "startTime": "27:51",
    "endTime": "27:54",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That's cool.",
    "startTime": "27:55",
    "endTime": "27:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, it's super cool.",
    "startTime": "27:56",
    "endTime": "27:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There's no going back.",
    "startTime": "27:58",
    "endTime": "28:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mean, to give you an idea of what that looks like.",
    "startTime": "28:01",
    "endTime": "28:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mean, so this flake, one of the interesting things about flakes for system configuration is you can have multiple machines defined in a single flake and reuse code kind of modules like you would in any other programming language, right?",
    "startTime": "28:04",
    "endTime": "28:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is a set of inputs that I use.",
    "startTime": "28:16",
    "endTime": "28:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can see it as kind of repositories that provide packages or modules I might want.",
    "startTime": "28:19",
    "endTime": "28:23",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I have NIX packages itself.",
    "startTime": "28:23",
    "endTime": "28:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Agency is a package which provides kind of secrets management using the age package Lanza Booty is a community project that provides secure boot support for nix.",
    "startTime": "28:25",
    "endTime": "28:35",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So the machine I'm on uses secure boot with automated full disk encryption unlock from the tpm, which is super nice.",
    "startTime": "28:35",
    "endTime": "28:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then these are actually projects that I maintain.",
    "startTime": "28:45",
    "endTime": "28:47",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So Crafts is a repackaging of Carnival's craft tools.",
    "startTime": "28:47",
    "endTime": "28:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There's snapcraft, charmcraft, Rock Craft, but available for Nixos because I have to build these artifacts every day and I prefer to do it natively on my machine that are vm.",
    "startTime": "28:52",
    "endTime": "29:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Ember is a small project I wrote that uses Firecracker to launch Ubuntu VMs, really fast for 10 testing and libations is a very recent addition which is a little cocktail recipe app for my phone that I host on a server and browse to over tailscale.",
    "startTime": "29:00",
    "endTime": "29:13",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I have kind of multiple machines here, right?",
    "startTime": "29:13",
    "endTime": "29:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So that's my laptop, that's my desktop, it's a little server in my in laws house and this is my home server.",
    "startTime": "29:16",
    "endTime": "29:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And these all use a kind of common set of modules, if you will, that allow me to kind of reuse all of the complicated bits.",
    "startTime": "29:22",
    "endTime": "29:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So for example, in services you'll see I have one set of configuration for example for pipewire, so services enablepipewire and I reuse this module in all my machines to make sure that I never have to worry about how to configure pipewire Again, I have various modules for bits of hardware.",
    "startTime": "29:31",
    "endTime": "29:50",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I have these nice audio engine monitors on my desk, and pipewire likes to suspend inactive syncs after a given set of seconds.",
    "startTime": "29:50",
    "endTime": "29:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And because they have their own DAC in them that makes them pop a bit like you're unplugging a 3.5mm jack and plugging it right in.",
    "startTime": "29:59",
    "endTime": "30:05",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so this piece of config I write, once I include it on all the machines that have audio NG monitors attached to them, and they stop popping on all those machines, it just solves the problem for me forever, basically.",
    "startTime": "30:05",
    "endTime": "30:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So, yeah, it's interesting.",
    "startTime": "30:16",
    "endTime": "30:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This is what you're seeing here is the nixos module system in action.",
    "startTime": "30:19",
    "endTime": "30:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you can think of nixos as the combination of the NIX package manager and the nixos module system.",
    "startTime": "30:22",
    "endTime": "30:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And nixos modules are the thing that turns a pile of packages into a distribution.",
    "startTime": "30:28",
    "endTime": "30:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it says, okay, well, this package needs to be started with systemd before that package on this target, right?",
    "startTime": "30:34",
    "endTime": "30:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This package requires a state directory in varlib Fu.",
    "startTime": "30:39",
    "endTime": "30:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This package requires, you know, some configuration in Etsy, blah, blah, right?",
    "startTime": "30:42",
    "endTime": "30:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so that's kind of how they work if we look at the hardware side, Kara, this is the machine I'm on right now.",
    "startTime": "30:46",
    "endTime": "30:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I enable this new convention for kind of bootloaders and a declarative boot called Boot Spec.",
    "startTime": "30:55",
    "endTime": "31:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And that's what enables me to use Secure Boot.",
    "startTime": "31:02",
    "endTime": "31:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I then say which kernel modules are available in the INIT RD and which kernel modules I like enabled on the machine.",
    "startTime": "31:05",
    "endTime": "31:11",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I tell it I like to use the latest Linux kernel in this case.",
    "startTime": "31:11",
    "endTime": "31:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This is my disk specification.",
    "startTime": "31:16",
    "endTime": "31:18",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is with another community project called Disko.",
    "startTime": "31:18",
    "endTime": "31:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you can see I essentially specify two devices, NVMe Zero, which is my root file system, which has an ESP partition and a bunch of butterfs sub volumes.",
    "startTime": "31:21",
    "endTime": "31:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then I have a second disk which is just for data, and I specify kind of an encryption key for it and a whole bunch of other stuff.",
    "startTime": "31:31",
    "endTime": "31:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so when I point the next OS installer at this flake, it basically, the installation process for one of my machines is I boot the nixos LIVE ISO.",
    "startTime": "31:38",
    "endTime": "31:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I clone.",
    "startTime": "31:48",
    "endTime": "31:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I literally type essentially one or two commands, right?",
    "startTime": "31:49",
    "endTime": "31:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I basically clone my repo and say nixos install and point it at this flake and give it the host name I want it to build, and it just drops the configuration on the machine.",
    "startTime": "31:53",
    "endTime": "32:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I reboot and the machine is exactly as it was before, right?",
    "startTime": "32:01",
    "endTime": "32:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So like the everything down to extensions installed in Chrome, plugins installed in Vim, the whole thing, theme that I want to set on my desktop.",
    "startTime": "32:03",
    "endTime": "32:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Everything is entirely declarative, right?",
    "startTime": "32:12",
    "endTime": "32:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it's a bit like, what, cloud init on steroids in some ways, I guess.",
    "startTime": "32:15",
    "endTime": "32:20",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "32:20",
    "endTime": "32:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And you can just kind of go.",
    "startTime": "32:20",
    "endTime": "32:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I use another project called Home Manager.",
    "startTime": "32:22",
    "endTime": "32:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And Home Manager is.",
    "startTime": "32:24",
    "endTime": "32:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can think of it as kind of like a, I don't know, almost like a nix virtual environment for your home directory.",
    "startTime": "32:26",
    "endTime": "32:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so I use Home Manager to, for example, to configure vim.",
    "startTime": "32:32",
    "endTime": "32:35",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So we could look them in, we could get meta here and look at like the.",
    "startTime": "32:35",
    "endTime": "32:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The vim config of the vim that we're looking at.",
    "startTime": "32:38",
    "endTime": "32:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is my vim config.",
    "startTime": "32:41",
    "endTime": "32:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I use a Home Manager module and I basically say enable vim with this package.",
    "startTime": "32:43",
    "endTime": "32:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Set up some aliases for me.",
    "startTime": "32:48",
    "endTime": "32:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Here's a bunch of LUA config that I've written and here are the VIM plugins that I want.",
    "startTime": "32:49",
    "endTime": "32:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And that means that on any machine I go to, vim is set up identically.",
    "startTime": "32:54",
    "endTime": "32:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I never have to work out how to do it again.",
    "startTime": "32:58",
    "endTime": "33:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "33:00",
    "endTime": "33:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like I just.",
    "startTime": "33:00",
    "endTime": "33:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I actually use this Home Manager config to provision Ubuntu VMs.",
    "startTime": "33:01",
    "endTime": "33:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I not only does this manage my nix machines, but on Ubuntu now I download the nix package Manager and I use Home Manager to provision all my dot files.",
    "startTime": "33:05",
    "endTime": "33:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "33:14",
    "endTime": "33:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So these, you know, each of these kind of nix statements will be translated in the background to whatever the format is required for this app.",
    "startTime": "33:14",
    "endTime": "33:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So in this case tmux, it will write a tmux.com file based on the contents of this.",
    "startTime": "33:22",
    "endTime": "33:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "33:25",
    "endTime": "33:26",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "That's super cool.",
    "startTime": "33:26",
    "endTime": "33:27",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So.",
    "startTime": "33:27",
    "endTime": "33:27",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So you don't have to manage dot files in the traditional simulink git repo.",
    "startTime": "33:28",
    "endTime": "33:32",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "One example is git, right.",
    "startTime": "33:32",
    "endTime": "33:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If you look here, this is essentially my what the sorts of thing you'd expect to find in your git config email name.",
    "startTime": "33:34",
    "endTime": "33:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There's some rules about which of my identities I use, depending on which directory I'm in, my file system aliases.",
    "startTime": "33:42",
    "endTime": "33:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And this will get rendered out into like a git config in your home directory, essentially.",
    "startTime": "33:48",
    "endTime": "33:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That's super clever.",
    "startTime": "33:54",
    "endTime": "33:55",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "That's super clever.",
    "startTime": "33:55",
    "endTime": "33:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So the way you bootstrap this machine is so you do a live cd essentially, and then you invoke by git repo.",
    "startTime": "33:58",
    "endTime": "34:04",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "You clone the git repo.",
    "startTime": "34:04",
    "endTime": "34:05",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, I can actually show you.",
    "startTime": "34:05",
    "endTime": "34:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I've scripted it to an extent, so let me just quickly show you what that looks like.",
    "startTime": "34:06",
    "endTime": "34:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I have this install with disco script, which I sort of collaborated on A bit with a chap called Martin Wimpress, who's quite well known in the Ubuntu community.",
    "startTime": "34:12",
    "endTime": "34:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is basically a wrapper.",
    "startTime": "34:22",
    "endTime": "34:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This is how I installed this machine.",
    "startTime": "34:24",
    "endTime": "34:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I'm talking to you right now.",
    "startTime": "34:26",
    "endTime": "34:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I re.",
    "startTime": "34:26",
    "endTime": "34:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I recently kind of redid it because I went down the whole secure boot and TPM backed FD root.",
    "startTime": "34:27",
    "endTime": "34:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But the crux of this is basically I run disco and pass it the disk config for the host.",
    "startTime": "34:33",
    "endTime": "34:40",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If you imagine target host would say Cara Freya Huggin.",
    "startTime": "34:40",
    "endTime": "34:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "34:42",
    "endTime": "34:43",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The names of the machines I have.",
    "startTime": "34:43",
    "endTime": "34:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so I say nix run disco from the live ISO, it will go and essentially partition the disk from underneath me.",
    "startTime": "34:45",
    "endTime": "34:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then I say nixos install flake and give it the name of the host to build.",
    "startTime": "34:52",
    "endTime": "34:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So in this case it would be Kara.",
    "startTime": "34:56",
    "endTime": "34:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then all this is just making sure the nixos config gets like asking to cross into the file system just so I don't have to re clone it when I boot up.",
    "startTime": "34:58",
    "endTime": "35:05",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But essentially the install process is those two commands.",
    "startTime": "35:05",
    "endTime": "35:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I run disco and then I run NIX install nixos install and point it to my flake and that's it.",
    "startTime": "35:08",
    "endTime": "35:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so I, like, it's really nice to not have to worry.",
    "startTime": "35:13",
    "endTime": "35:17",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "When I wanted to go through this process of.",
    "startTime": "35:18",
    "endTime": "35:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I didn't used to use disco.",
    "startTime": "35:21",
    "endTime": "35:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I had kind of did like a manual partitioning and install process the first time.",
    "startTime": "35:22",
    "endTime": "35:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I'd been using the machine for maybe three or four months.",
    "startTime": "35:26",
    "endTime": "35:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I got it all set up exactly how I liked it.",
    "startTime": "35:28",
    "endTime": "35:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And the entire process of like new compaving the machine and getting it back to exactly how it was before was like five or six minutes in total.",
    "startTime": "35:31",
    "endTime": "35:40",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Okay.",
    "startTime": "35:40",
    "endTime": "35:40",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It just becomes a total non issue.",
    "startTime": "35:41",
    "endTime": "35:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right, right.",
    "startTime": "35:42",
    "endTime": "35:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Is this something that you would, I mean, you obviously use for your home lab.",
    "startTime": "35:44",
    "endTime": "35:48",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Is it something that you would consider production ready for the cloud or is it still kind of far off from there?",
    "startTime": "35:48",
    "endTime": "35:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Or how do you.",
    "startTime": "35:56",
    "endTime": "35:57",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I think, yeah, like, I mean, depends on your use case.",
    "startTime": "35:57",
    "endTime": "35:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "35:59",
    "endTime": "35:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like, I mean, good luck finding big company.",
    "startTime": "35:59",
    "endTime": "36:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You know, one of the reasons that people choose Canonical, for example, in my professional life is because we're a company that can provide professional support and security, maintenance and things like that.",
    "startTime": "36:01",
    "endTime": "36:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And you know, there are certainly companies around that do consulting around Nix and will help you with that, but it's nowhere near as, you know, prolific as something like Canonical or Red Hat or Seuss or whatever.",
    "startTime": "36:08",
    "endTime": "36:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "36:19",
    "endTime": "36:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But I know of companies who run entirely on Nix.",
    "startTime": "36:20",
    "endTime": "36:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "36:22",
    "endTime": "36:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like, and there's something nice from a security posture standpoint, you build these VMs that have exactly what you asked for and nothing more in them.",
    "startTime": "36:23",
    "endTime": "36:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "36:29",
    "endTime": "36:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Attack Surface is very small.",
    "startTime": "36:30",
    "endTime": "36:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I can give an example actually of a VM spec that I use just for testing some code.",
    "startTime": "36:32",
    "endTime": "36:39",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if I go to Flake.",
    "startTime": "36:39",
    "endTime": "36:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I mentioned earlier on the crafts.",
    "startTime": "36:42",
    "endTime": "36:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Flake.",
    "startTime": "36:44",
    "endTime": "36:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is essentially packaging snapcraft.",
    "startTime": "36:45",
    "endTime": "36:47",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So for building Snap applications and interacting with the Snap store as a developer.",
    "startTime": "36:47",
    "endTime": "36:50",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But for on Nix, it's a bit of a strange situation, but this repository provides all of the Python packages that they depend on and then the apps themselves, charmcraft, Rockcraft and snapcraft.",
    "startTime": "36:50",
    "endTime": "37:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I wanted a way of testing that these things functioned correctly on nixos in CI.",
    "startTime": "37:03",
    "endTime": "37:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So before I merge a change, I want to make sure that I've bootstrapped an actual nixos machine, installed charmcraft and tried to build a real charm with it.",
    "startTime": "37:09",
    "endTime": "37:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "37:16",
    "endTime": "37:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so I did that by including a nixos configuration for the build VM in the repository.",
    "startTime": "37:17",
    "endTime": "37:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So, which I can show you here.",
    "startTime": "37:22",
    "endTime": "37:23",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if we just take a quick look at VM Nix.",
    "startTime": "37:23",
    "endTime": "37:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is the entire configuration for a NixOS machine.",
    "startTime": "37:26",
    "endTime": "37:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There's a few shortcuts here because it's a QMU vm, so it's a little bit simpler in terms of, you know, as ever, it's a vm, but essentially you tell it what platform packages you want to get from Nix, it uses an overlay, which is provided by the Flake.",
    "startTime": "37:30",
    "endTime": "37:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So the overlay is a way of essentially customizing your machine's view of Nix packages.",
    "startTime": "37:44",
    "endTime": "37:51",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And this is super interesting because, for example, imagine that Nix packages provides version 1.2 of A thing foo, like some package on the Internet, but you are like Captain Bleeding Edge and you want to have 1.3.",
    "startTime": "37:51",
    "endTime": "38:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's just been released and it hasn't landed in Nix packages upstream yet, but you want it on your machine.",
    "startTime": "38:06",
    "endTime": "38:11",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can literally say, right, take all of Nix packages, except patch the attribute to say, 1.3 rather than 1.2, and rebuild the package with that attribute changed.",
    "startTime": "38:11",
    "endTime": "38:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Nice.",
    "startTime": "38:19",
    "endTime": "38:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So here this is basically saying make Nix packages look like it already has my packages in it.",
    "startTime": "38:20",
    "endTime": "38:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Charmcraft, snapcraft, Rockcraft, you know, enable.",
    "startTime": "38:24",
    "endTime": "38:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "In this case, it's just a CI testing vm.",
    "startTime": "38:28",
    "endTime": "38:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I disable the firewall, enable open ssh, allow login with password and allow lexd, and that's it.",
    "startTime": "38:30",
    "endTime": "38:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If I want to run that VM from any machine, I can do nix, run the test vm, and I'm going to tell it to demonize and go in the background.",
    "startTime": "38:37",
    "endTime": "38:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So there you go.",
    "startTime": "38:46",
    "endTime": "38:47",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's pre built.",
    "startTime": "38:47",
    "endTime": "38:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So all of the dependencies downloaded.",
    "startTime": "38:48",
    "endTime": "38:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This would sometimes take a couple of minutes because we'd have to build an entire rootfs and I can now ssh into that vm.",
    "startTime": "38:49",
    "endTime": "38:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "38:56",
    "endTime": "38:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it's set up with a password that I've already set in the config.",
    "startTime": "38:56",
    "endTime": "38:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And there we go.",
    "startTime": "38:59",
    "endTime": "39:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "We're now in a Mixos vm and inside this Nexus VM is not snapcraft, apparently.",
    "startTime": "39:00",
    "endTime": "39:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is essentially a brand new.",
    "startTime": "39:09",
    "endTime": "39:11",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "A brand new Nexus vm.",
    "startTime": "39:11",
    "endTime": "39:13",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I should be able to do, for example, okay, it hasn't gone through the whole setup, I need to try again on this demo.",
    "startTime": "39:14",
    "endTime": "39:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But essentially this is a brand new Nixos VM and when I come out of it's gone again.",
    "startTime": "39:25",
    "endTime": "39:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And anyone could git clone the crafts flake and run this command and that VM would begin running on their machine with all the exact same set dependencies that we just spoke about.",
    "startTime": "39:28",
    "endTime": "39:37",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right, nice.",
    "startTime": "39:37",
    "endTime": "39:39",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So one thing you mentioned security before about improving security because it's basically reducing or removing a lot of dependencies I.e.",
    "startTime": "39:39",
    "endTime": "39:48",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "potential attack vector, essentially.",
    "startTime": "39:49",
    "endTime": "39:51",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But one thing that stood out to me is if you are keeping around so many different versions of various like let's say libc, for instance, would not the fact that you're not pinning into a system LIBC potentially increase the risk of you having a compromised version for that particular package?",
    "startTime": "39:51",
    "endTime": "40:15",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "You're maintaining like five different versions of libc, for instance.",
    "startTime": "40:15",
    "endTime": "40:18",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, I mean, LIBC maybe wasn't a great example in the sense that I don't think there's a.",
    "startTime": "40:18",
    "endTime": "40:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I could be wrong.",
    "startTime": "40:22",
    "endTime": "40:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Maybe there are different versions for a given release of nixos.",
    "startTime": "40:22",
    "endTime": "40:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I don't know off the top of my head.",
    "startTime": "40:25",
    "endTime": "40:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But I mean, yes, it's like anything else.",
    "startTime": "40:25",
    "endTime": "40:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like you have to have a bit of good hygiene about it.",
    "startTime": "40:27",
    "endTime": "40:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "40:29",
    "endTime": "40:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If you never update your machine, you're going to have out of date stuff.",
    "startTime": "40:29",
    "endTime": "40:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "40:31",
    "endTime": "40:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, the.",
    "startTime": "40:32",
    "endTime": "40:33",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There's a couple of different kind of channels.",
    "startTime": "40:33",
    "endTime": "40:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "They're known as in Nix.",
    "startTime": "40:36",
    "endTime": "40:37",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you can run.",
    "startTime": "40:37",
    "endTime": "40:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "They do six monthly releases, so normally in May and November.",
    "startTime": "40:38",
    "endTime": "40:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So we just had 2305 in May and there's 2311 just happened and they'll be at 2405.",
    "startTime": "40:42",
    "endTime": "40:47",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so actually quite similar to Ubuntu in some ways.",
    "startTime": "40:47",
    "endTime": "40:50",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Or you can find Unstable.",
    "startTime": "40:50",
    "endTime": "40:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "40:52",
    "endTime": "40:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I follow Unstable because I'm a lunatic and I like my machines breaking on me all the time, which is actually unfair.",
    "startTime": "40:52",
    "endTime": "40:57",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "They don't break often, but you know, it comes with a little bit more instability than the kind of, you know, six Months he releases.",
    "startTime": "40:57",
    "endTime": "41:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it's.",
    "startTime": "41:05",
    "endTime": "41:07",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's kind of up to you.",
    "startTime": "41:07",
    "endTime": "41:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I have some machines that run on a stable release for the reason that, you know, I.",
    "startTime": "41:08",
    "endTime": "41:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "My little home server, for example, I don't want to have to fiddle with it all the time.",
    "startTime": "41:13",
    "endTime": "41:17",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I want it to perform the.",
    "startTime": "41:17",
    "endTime": "41:18",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I just want it to work.",
    "startTime": "41:18",
    "endTime": "41:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "41:19",
    "endTime": "41:20",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "My laptop and my desktop, I run a bit more bleeding edge because I want to play with all the new shiny pipewire and new shiny Hyperland and new shiny whatever else.",
    "startTime": "41:20",
    "endTime": "41:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "41:26",
    "endTime": "41:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Okay, that makes sense.",
    "startTime": "41:27",
    "endTime": "41:29",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So one thing I wanted to kind of wrap up this conversation with is I think you have probably some of the most.",
    "startTime": "41:29",
    "endTime": "41:38",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Complicated might not be the best word, but sophisticated, perhaps home setup and developer environment setup with.",
    "startTime": "41:38",
    "endTime": "41:46",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I know some of it is tailscale and there is a bunch of Envoy, I believe it is, and just want to walk me through a little bit of like your pet project, I guess, which is your.",
    "startTime": "41:47",
    "endTime": "42:00",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Your home lab.",
    "startTime": "42:00",
    "endTime": "42:01",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, certainly.",
    "startTime": "42:01",
    "endTime": "42:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So, I mean, it's not actually.",
    "startTime": "42:02",
    "endTime": "42:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mean, in reality, not as complicated as it probably sounds.",
    "startTime": "42:04",
    "endTime": "42:07",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So let me.",
    "startTime": "42:07",
    "endTime": "42:07",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I can sort of demonstrate some of it.",
    "startTime": "42:08",
    "endTime": "42:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I use.",
    "startTime": "42:10",
    "endTime": "42:11",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I use Tailscale really heavily.",
    "startTime": "42:11",
    "endTime": "42:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I probably beginning to sound like a paid shill for Tailscale, but I'm not.",
    "startTime": "42:12",
    "endTime": "42:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I just think it's absolutely great tech.",
    "startTime": "42:16",
    "endTime": "42:18",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I just think they do a wonderful job.",
    "startTime": "42:18",
    "endTime": "42:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I maintained my own WireGuard server on DigitalOcean for years and for some reason resisted going to Tailscale.",
    "startTime": "42:19",
    "endTime": "42:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And the first day I tried it, I was like, oh my God, why have I been so.",
    "startTime": "42:25",
    "endTime": "42:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mean, it's not that complicated.",
    "startTime": "42:30",
    "endTime": "42:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I have all my machines on tailscale, so my phone, my laptop, my desktop, my home server, my Apple TV, my iPad, like everything is on tailscale.",
    "startTime": "42:31",
    "endTime": "42:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And that takes the problem of connectivity out of the picture.",
    "startTime": "42:39",
    "endTime": "42:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "All of my machines can talk to all of my machines all of the time, irrespective of what network I'm on, which makes life pretty easy.",
    "startTime": "42:42",
    "endTime": "42:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I have a honking great desktop under my desk with a big 32 core Ryzen chip in it.",
    "startTime": "42:50",
    "endTime": "42:54",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then I have a relatively tiny kind of ultrabook laptop.",
    "startTime": "42:54",
    "endTime": "42:57",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And the way I.",
    "startTime": "42:58",
    "endTime": "42:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "When I travel for work, I take my little tiny laptop and it runs a web browser and a terminal.",
    "startTime": "42:58",
    "endTime": "43:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I basically connect over my tailscale network to my big desktop.",
    "startTime": "43:04",
    "endTime": "43:07",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if I'm ever doing any technical work, it's all happening on the desktop.",
    "startTime": "43:07",
    "endTime": "43:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I use things like Visual Studio code Remote.",
    "startTime": "43:10",
    "endTime": "43:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "43:12",
    "endTime": "43:13",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Just a remote VS code.",
    "startTime": "43:13",
    "endTime": "43:15",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Which is, by the way, like you showed me that.",
    "startTime": "43:15",
    "endTime": "43:18",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I was.",
    "startTime": "43:18",
    "endTime": "43:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I've been never been A big fan of VS code but that is a game changer.",
    "startTime": "43:19",
    "endTime": "43:24",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Like the developer environment, you just have.",
    "startTime": "43:24",
    "endTime": "43:26",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "The local window, the machine.",
    "startTime": "43:26",
    "endTime": "43:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It looks like it's running locally on your machine, but actually when you open a terminal, it's a terminal on the remote machine.",
    "startTime": "43:27",
    "endTime": "43:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You open a file, it's a file on the remote machine.",
    "startTime": "43:32",
    "endTime": "43:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "43:35",
    "endTime": "43:35",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's a super nice way to do your work.",
    "startTime": "43:35",
    "endTime": "43:37",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "In particular with tailscale.",
    "startTime": "43:37",
    "endTime": "43:39",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It's such a clean developer experience.",
    "startTime": "43:39",
    "endTime": "43:41",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Obviously if you're into I use Vim.",
    "startTime": "43:41",
    "endTime": "43:43",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if I'm in the terminal, I use vim.",
    "startTime": "43:43",
    "endTime": "43:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If I'm not, you know, forced to be in the terminal because I'm not an SSH or whatever.",
    "startTime": "43:45",
    "endTime": "43:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like my editor of choice for day to day work is versus Code.",
    "startTime": "43:48",
    "endTime": "43:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And it just to me that just is a super nice benefit is I can carry this super lightweight laptop with a nice long battery life and you know, doesn't break my back carrying it around, but I can get access to my ridiculous desktop and my server at home without thinking about it.",
    "startTime": "43:52",
    "endTime": "44:07",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And with VIM binding on versus code it makes it more sensible as well.",
    "startTime": "44:07",
    "endTime": "44:10",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, told.",
    "startTime": "44:10",
    "endTime": "44:12",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mean but I mean the server setup is not.",
    "startTime": "44:12",
    "endTime": "44:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Not super crazy, right?",
    "startTime": "44:14",
    "endTime": "44:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So the server is called Thor because back when I bought it I thought it was quite powerful.",
    "startTime": "44:16",
    "endTime": "44:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "These days, not so much.",
    "startTime": "44:20",
    "endTime": "44:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's just an old NUC.",
    "startTime": "44:21",
    "endTime": "44:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's literally an i7 NUC.",
    "startTime": "44:22",
    "endTime": "44:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And it's a pretty simple config, right?",
    "startTime": "44:25",
    "endTime": "44:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It has the boot stuff set up as per my other machine.",
    "startTime": "44:27",
    "endTime": "44:31",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I specify the disks with disko and in extra.",
    "startTime": "44:31",
    "endTime": "44:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I also back this thing up with Borg Backup.",
    "startTime": "44:36",
    "endTime": "44:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is an example of how you can back up like you can declaratively set up Borg backup.",
    "startTime": "44:38",
    "endTime": "44:43",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So here I'm using the Nixos module system to say services Borg backup and I create a job called Borg Base.",
    "startTime": "44:43",
    "endTime": "44:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I throw it some paths that I want to back up and some paths I want to exclude.",
    "startTime": "44:48",
    "endTime": "44:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I give it the repo and I am using agency here to kind of bring the secrets in.",
    "startTime": "44:52",
    "endTime": "44:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So the secrets are all in the git repository, encrypted, using nice modern cryptography and that goes away every evening and backs my stuff up to board base.",
    "startTime": "44:56",
    "endTime": "45:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I don't really think about it in terms of services.",
    "startTime": "45:04",
    "endTime": "45:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Again, this is all so the way I like to run it is it runs a whole bunch of media server stuff, Jellyfin and that sort of stuff.",
    "startTime": "45:08",
    "endTime": "45:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And that is all run kind of bare Nixos modules, right?",
    "startTime": "45:16",
    "endTime": "45:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "They're just like installed as Nixos modules services.",
    "startTime": "45:20",
    "endTime": "45:23",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Jellyfin Enable equals true and it appears and I have traffic in front of that, but I've got traffic configured to pull TLS certificates from tailscale.",
    "startTime": "45:23",
    "endTime": "45:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So tailscale has this neat feature where it can issue you internal HTTPs certificates.",
    "startTime": "45:34",
    "endTime": "45:39",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it uses the DNS challenge, I believe, to basically, when you use tailscale, each of your machines gets a DNS name with a thing they called Magic DNS.",
    "startTime": "45:39",
    "endTime": "45:47",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And they can basically do all of the plumbing for you to make sure that you get a cert from let's encrypt that's valid inside your tailnet.",
    "startTime": "45:48",
    "endTime": "45:54",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "45:54",
    "endTime": "45:54",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so there's this nice feature in Traefik 3, and in fact, this is an interesting kind of illustration of overlays.",
    "startTime": "45:54",
    "endTime": "46:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "46:03",
    "endTime": "46:03",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So Traefik 3 is in beta, so it's not in the Nix packages repository at the moment, but I want it.",
    "startTime": "46:03",
    "endTime": "46:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "46:09",
    "endTime": "46:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so what I say is, on my systems there is a package called traffic3 which takes the existing traffic definition from nix packages and just overrides the version number and the hash of the source code and builds it otherwise exactly the same.",
    "startTime": "46:09",
    "endTime": "46:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it keeps all the same.",
    "startTime": "46:24",
    "endTime": "46:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "All the knowledge about how to build traffic is all in Nix packages.",
    "startTime": "46:25",
    "endTime": "46:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I'm just saying do that, but do it with that version of the source code instead.",
    "startTime": "46:28",
    "endTime": "46:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Very nice.",
    "startTime": "46:33",
    "endTime": "46:34",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So that just means that traffic on my machine happens to be, in this case 300 beta 5.",
    "startTime": "46:34",
    "endTime": "46:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I'll do this kind of periodically.",
    "startTime": "46:40",
    "endTime": "46:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like maybe there's a bug in a package and there was a bug in LEXD for nixos a few weeks ago, and I use LEXD every day for work.",
    "startTime": "46:41",
    "endTime": "46:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so I patched it in an overlay to make it work on my machine, submitted the patch to nixos and then when it landed in nixos, I removed the overlay and pulled it down from the Nix package repository.",
    "startTime": "46:48",
    "endTime": "46:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "46:58",
    "endTime": "46:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it's a really nice.",
    "startTime": "46:58",
    "endTime": "46:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like you can just kind of patch things on your system there and then if you want to, either indefinitely or until it gets fixed.",
    "startTime": "46:59",
    "endTime": "47:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So the beautiful structure of this setup is essentially you got a zero trust environment almost that, largely thanks to tailscale and traffic, you have a beautiful secure environment that.",
    "startTime": "47:06",
    "endTime": "47:22",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Well, it is vpn, I guess, but it's zero trust in the sense of like using proper sign certs, using proper set of setups between routing between devices.",
    "startTime": "47:22",
    "endTime": "47:33",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yep.",
    "startTime": "47:33",
    "endTime": "47:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So, I mean, if you.",
    "startTime": "47:34",
    "endTime": "47:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "For example.",
    "startTime": "47:35",
    "endTime": "47:35",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So my latest project is a little cocktail recipe app.",
    "startTime": "47:36",
    "endTime": "47:40",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's called Libations, it's on my GitHub and that is really interesting.",
    "startTime": "47:40",
    "endTime": "47:43",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Tailscale provide a library called tsnet which allows you to essentially embed the idea of joining a tail scale network into an application.",
    "startTime": "47:43",
    "endTime": "47:50",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This application knows how to join a telnet.",
    "startTime": "47:51",
    "endTime": "47:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Essentially I set an environment variable which has a key and I run libations and it will join my telnet as if it's like a machine.",
    "startTime": "47:53",
    "endTime": "48:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It'll just appear on my tailnet as an application that exposes a service and that's deployed on my server.",
    "startTime": "48:01",
    "endTime": "48:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If we look at, for example, so if I just break down this a little bit.",
    "startTime": "48:06",
    "endTime": "48:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So each person's tailscale network, Tailnet gets like a, an ID, right?",
    "startTime": "48:16",
    "endTime": "48:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Mine is Tailnet D5DA.",
    "startTime": "48:22",
    "endTime": "48:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can choose it and change it and mess around.",
    "startTime": "48:24",
    "endTime": "48:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I've just left it as the default.",
    "startTime": "48:26",
    "endTime": "48:27",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And so my kind of tailscale network is tailnet d5da ts.net and then each of my machines are, you know, hostname.",
    "startTime": "48:27",
    "endTime": "48:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So Cara, Thor, Plugin, whatever.",
    "startTime": "48:34",
    "endTime": "48:37",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And if I look, if I try to grab this thing now, you'll see it's HTTP.",
    "startTime": "48:37",
    "endTime": "48:41",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I was hoping to get the certificate there as well.",
    "startTime": "48:41",
    "endTime": "48:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can see here it's done a TLS 1.3 handshake with a certificate that was issued by.",
    "startTime": "48:45",
    "endTime": "48:51",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Let's encrypt based on the tailscale certificate name.",
    "startTime": "48:51",
    "endTime": "48:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "48:55",
    "endTime": "48:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And this app is only ever available on my telnet.",
    "startTime": "48:56",
    "endTime": "48:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It doesn't exist on the public Internet, so to speak.",
    "startTime": "48:58",
    "endTime": "49:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But all of my machines, or critically my phone can see it.",
    "startTime": "49:01",
    "endTime": "49:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "49:04",
    "endTime": "49:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "and that's it.",
    "startTime": "49:04",
    "endTime": "49:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I use tailscale acls so I limit which machines can talk to which other machines.",
    "startTime": "49:06",
    "endTime": "49:11",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "but yeah, it's looks really complicated but in reality is super low maintenance because all the machines are declaratively configured and all the networking is taken care of by tailscale.",
    "startTime": "49:11",
    "endTime": "49:22",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It really like is.",
    "startTime": "49:22",
    "endTime": "49:24",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's the lowest maintenance kind of home lap situation I've had in a long time.",
    "startTime": "49:24",
    "endTime": "49:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And you could treat everything like a DMZ essentially on your network.",
    "startTime": "49:28",
    "endTime": "49:32",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, with the caveat that the learning curve for Nix and Nixos is steep.",
    "startTime": "49:32",
    "endTime": "49:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like, it took me, I ran what the machine that is now running as a little home server.",
    "startTime": "49:38",
    "endTime": "49:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I ran on my desk alongside my desktop for maybe three months.",
    "startTime": "49:42",
    "endTime": "49:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I watched a whole bunch of videos and I just kind of iteratively built this machine up and blew it up a bunch of times and broke it and kind of slowly iterated towards a point where I thought, actually now I think I could probably install this.",
    "startTime": "49:45",
    "endTime": "49:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I think I went to my laptop next and then after I'd used it on my laptop for a bit, I was then like, all right, the next Way to level up is just to put this on my desktop and suffer through it every day.",
    "startTime": "49:56",
    "endTime": "50:04",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And now I think I'm pretty converted.",
    "startTime": "50:04",
    "endTime": "50:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, I mean I.",
    "startTime": "50:09",
    "endTime": "50:10",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I was initially starting to working with porting our CLI to.",
    "startTime": "50:10",
    "endTime": "50:14",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "To nix myself an evening and I figured well, how hard can it be?",
    "startTime": "50:14",
    "endTime": "50:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Well, it turns out that it's slightly steeper loading curve than waking up a docker file or something.",
    "startTime": "50:19",
    "endTime": "50:25",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, it's one of those things like it's a lot of investment up front, but it is super powerful.",
    "startTime": "50:25",
    "endTime": "50:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like I now for all the, for all of the things that I work on, I do a flight Linux.",
    "startTime": "50:30",
    "endTime": "50:35",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mean I can show you that libations thing that I was just talking about, right.",
    "startTime": "50:35",
    "endTime": "50:39",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This is so this is the flake nix for that and it has a package, I mean that's literally all of the code to package that go project as you know, as a NIX package for any system.",
    "startTime": "50:39",
    "endTime": "50:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "50:52",
    "endTime": "50:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I literally say the source is this directory.",
    "startTime": "50:53",
    "endTime": "50:54",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Here's the hash for all of the dependencies.",
    "startTime": "50:55",
    "endTime": "50:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It needs Hugo because it serves a static site built with Hugo and that's it, that's the whole thing.",
    "startTime": "50:57",
    "endTime": "51:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That is the build recipe for that package on any Nix machine.",
    "startTime": "51:01",
    "endTime": "51:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then I also provide a Nixos module.",
    "startTime": "51:06",
    "endTime": "51:08",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if anyone caught onto the modules thing, this is basically saying on a Nixos machine if you've got this kind of set up in your environment, you can do, you know, services libations enable equals true and it will set up this systemd unit for you with this environment and like these settings.",
    "startTime": "51:08",
    "endTime": "51:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "51:25",
    "endTime": "51:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So it's a way of providing kind of very similar to snaps.",
    "startTime": "51:25",
    "endTime": "51:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "51:30",
    "endTime": "51:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You work in the Snap where snaps have SNAP services.",
    "startTime": "51:30",
    "endTime": "51:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "51:32",
    "endTime": "51:32",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you've got the actual package and then the ability to run something as a daemon.",
    "startTime": "51:32",
    "endTime": "51:35",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This is very similar to that in some respects.",
    "startTime": "51:35",
    "endTime": "51:37",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Interesting.",
    "startTime": "51:38",
    "endTime": "51:38",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So do you need to do that for.",
    "startTime": "51:38",
    "endTime": "51:42",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I guess you do that for your traffic setup as well where you need to renew certificates, you define them in a similar sense.",
    "startTime": "51:43",
    "endTime": "51:48",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Wow.",
    "startTime": "51:49",
    "endTime": "51:49",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I can show you the traffic setup.",
    "startTime": "51:49",
    "endTime": "51:51",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It's not soup.",
    "startTime": "51:51",
    "endTime": "51:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Interesting because a lot of it is taken care of by traffic.",
    "startTime": "51:53",
    "endTime": "51:56",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Ultimately that is not what I wanted.",
    "startTime": "51:56",
    "endTime": "51:58",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if we look at.",
    "startTime": "52:00",
    "endTime": "52:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So so this is set up in a slightly more modular fashion.",
    "startTime": "52:07",
    "endTime": "52:10",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this kind of just basically says enable traffic, enable the traffic module.",
    "startTime": "52:10",
    "endTime": "52:16",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But instead of using the package in upstream, use my Traffic 3.",
    "startTime": "52:16",
    "endTime": "52:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "52:19",
    "endTime": "52:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this is saying use exactly what the Nixos folks, the find Nixos folks have defined but don't install their Traefik package.",
    "startTime": "52:19",
    "endTime": "52:25",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Install mine and then on Thor I have this config where I essentially say, you can see again, like this is defined in the NIX language, but will get rendered out to a config YAML or config toml.",
    "startTime": "52:25",
    "endTime": "52:39",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "52:39",
    "endTime": "52:39",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So this will become a config that Thor, that Traefik knows how to build.",
    "startTime": "52:39",
    "endTime": "52:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "52:44",
    "endTime": "52:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you can see here, if you're familiar with Traefik, I don't know.",
    "startTime": "52:44",
    "endTime": "52:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But here are the routers.",
    "startTime": "52:46",
    "endTime": "52:47",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "52:47",
    "endTime": "52:48",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That I have.",
    "startTime": "52:48",
    "endTime": "52:49",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Here are the services that back those and they point to all the different ports of all the different things that are running on the machine.",
    "startTime": "52:49",
    "endTime": "52:54",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And I have a couple of, you know, where is it?",
    "startTime": "52:54",
    "endTime": "52:57",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Here's the let's encrypt config that tells it how to use.",
    "startTime": "52:57",
    "endTime": "53:01",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "What's this?",
    "startTime": "53:01",
    "endTime": "53:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So yes, this machine has some stuff on the external Internet and uses distillations.",
    "startTime": "53:02",
    "endTime": "53:06",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Let's encrypt provider.",
    "startTime": "53:06",
    "endTime": "53:07",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And some stuff is in tailscale.",
    "startTime": "53:07",
    "endTime": "53:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And that's it.",
    "startTime": "53:09",
    "endTime": "53:09",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like, that's all the.",
    "startTime": "53:09",
    "endTime": "53:11",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So there's 108 lines of nix, including a couple of helper functions.",
    "startTime": "53:11",
    "endTime": "53:14",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right, nice.",
    "startTime": "53:14",
    "endTime": "53:15",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And behind the scenes on NIX os, I presume it relies on systemd to manage services.",
    "startTime": "53:15",
    "endTime": "53:22",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, exactly, it is.",
    "startTime": "53:23",
    "endTime": "53:26",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I mean, to the extent that, you know, if I just take a look at.",
    "startTime": "53:26",
    "endTime": "53:29",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "If you look in here, you can kind of see some of the nix magic at play.",
    "startTime": "53:32",
    "endTime": "53:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "53:36",
    "endTime": "53:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So I don't know if you.",
    "startTime": "53:36",
    "endTime": "53:38",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "This is Etsy systemd system where you'd expect to find system units.",
    "startTime": "53:38",
    "endTime": "53:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And you can see each of them is kind of a symlink to somewhere in the next store.",
    "startTime": "53:42",
    "endTime": "53:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "53:46",
    "endTime": "53:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "53:46",
    "endTime": "53:47",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "We could take a look at traffic on my server if you wanted.",
    "startTime": "53:47",
    "endTime": "53:50",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "53:50",
    "endTime": "53:50",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if I jump onto my server.",
    "startTime": "53:50",
    "endTime": "53:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you can see Traefik service is symlinked to this thing in the NIX store.",
    "startTime": "54:00",
    "endTime": "54:05",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if we take a look at that file, that's the systemd unit that was written by the NIX OS module.",
    "startTime": "54:05",
    "endTime": "54:11",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And you can see that it is running Traefik 3.00 beta 5 as I declared in my overlay.",
    "startTime": "54:11",
    "endTime": "54:17",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And it's running from this config file.",
    "startTime": "54:17",
    "endTime": "54:19",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So if I grab that and cut that out.",
    "startTime": "54:19",
    "endTime": "54:23",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can see this is a valid traffic config but generated from the.",
    "startTime": "54:23",
    "endTime": "54:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "The kind of nix language stuff.",
    "startTime": "54:28",
    "endTime": "54:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "54:30",
    "endTime": "54:30",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And then it kind of goes, you know, it's got a providers thing here which again, you can kind of follow all the.",
    "startTime": "54:30",
    "endTime": "54:36",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Down there's all the routers that have been translated from my NIX code into something that traffic can understand with all the different kind of host names and paths and various things.",
    "startTime": "54:36",
    "endTime": "54:43",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "It needs.",
    "startTime": "54:43",
    "endTime": "54:43",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "54:43",
    "endTime": "54:44",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Wow.",
    "startTime": "54:45",
    "endTime": "54:45",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "But obviously the nice thing about NIX is while it's a little bit terse and not everyone loves the language, once you've learned it, the machinery behind the scenes then takes care of figuring out how to render a traffic file or a TOML file for traffic or a VIMRC or whatever it is.",
    "startTime": "54:45",
    "endTime": "55:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "55:02",
    "endTime": "55:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, no, this is super interesting.",
    "startTime": "55:02",
    "endTime": "55:06",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I wish I had enough time to play with this, but I definitely will try to carve out some time in the future and maybe we do another in person no doubt session and yeah, I'll.",
    "startTime": "55:06",
    "endTime": "55:17",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I'll send over some links that you can chuck into your.",
    "startTime": "55:18",
    "endTime": "55:20",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There's a couple of really good resources.",
    "startTime": "55:20",
    "endTime": "55:21",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "There's the people who make the NIX install I spoke about have a thing called Zero to Nix, which is this nice kind of getting started guide and I watched some videos from an Australian chap called Will Taylor, I think his name was.",
    "startTime": "55:21",
    "endTime": "55:33",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I'll send you the link.",
    "startTime": "55:33",
    "endTime": "55:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And that's like a nice little YouTube series that goes from kind of installing Nixos the kind of most primitive way right through to managing your system with a flake.",
    "startTime": "55:34",
    "endTime": "55:42",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And that's how I started and then I just slowly kind of iterated.",
    "startTime": "55:43",
    "endTime": "55:46",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "And the nice thing is most like a huge number of people are sharing their configs on GitHub.",
    "startTime": "55:46",
    "endTime": "55:51",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Mine is completely public.",
    "startTime": "55:51",
    "endTime": "55:52",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I'll put a link to that too.",
    "startTime": "55:52",
    "endTime": "55:53",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You can see it, right?",
    "startTime": "55:53",
    "endTime": "55:54",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "So you can kind of.",
    "startTime": "55:54",
    "endTime": "55:55",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "I spent a long time just kind of looking around at other people's flights going, oh, that's interesting.",
    "startTime": "55:55",
    "endTime": "55:59",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Haven't seen that before.",
    "startTime": "55:59",
    "endTime": "56:00",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Like oh, I'm going to steal that.",
    "startTime": "56:00",
    "endTime": "56:02",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "You know I'm very compelled into throwing up my proxmox Home Lab server in favor of.",
    "startTime": "56:03",
    "endTime": "56:13",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Of this.",
    "startTime": "56:13",
    "endTime": "56:13",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But yeah, it, yeah, I don't think it's something that should be taken lightly.",
    "startTime": "56:14",
    "endTime": "56:18",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Like built in modules for managing systemd unspawn containers and managing VMs and like you can have all of that stuff just in a nix config checked into git somewhere and it'll just happen.",
    "startTime": "56:18",
    "endTime": "56:28",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, we should also talk one day about LEXD UI as a Proxmox alternative.",
    "startTime": "56:28",
    "endTime": "56:33",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "That's super interesting.",
    "startTime": "56:33",
    "endTime": "56:34",
    "speaker_name": "Jon Seager",
    "speaker_id": 1
  },
  {
    "sentence": "Absolutely.",
    "startTime": "56:34",
    "endTime": "56:34",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I think we need to do a follow up session about some other fun things we've been noting about in person over the last year or two and then we can yeah, pick that up in a future show.",
    "startTime": "56:34",
    "endTime": "56:46",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But this been super helpful John, I much appreciate you coming on the show and I hope everybody on the.",
    "startTime": "56:46",
    "endTime": "56:52",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "On listening to this I found this as interesting as I have found.",
    "startTime": "56:52",
    "endTime": "56:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So thank you so much John and have a day.",
    "startTime": "56:56",
    "endTime": "56:59",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Cheers.",
    "startTime": "56:59",
    "endTime": "57:00",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Bye.",
    "startTime": "57:00",
    "endTime": "57:00",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  }
]
