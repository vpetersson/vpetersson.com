[
  {
    "sentence": "Welcome back to nerding out with Victor today.",
    "startTime": "00:03",
    "endTime": "00:06",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "My guest is Liss Rice, who is a security geek and open source champion.",
    "startTime": "00:06",
    "endTime": "00:11",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I got to know Liz a number of years ago when were both part of the early London Kubernetes scene.",
    "startTime": "00:11",
    "endTime": "00:16",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Since then, Liz has moved up in the world and written no less than two books.",
    "startTime": "00:16",
    "endTime": "00:20",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "The most recent one about EBPF, which I actually got a copy of right here, thanks to Liz.",
    "startTime": "00:20",
    "endTime": "00:25",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Amazing.",
    "startTime": "00:25",
    "endTime": "00:26",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And today's conversation will be largely around EBPF, but not limited to EBBF.",
    "startTime": "00:27",
    "endTime": "00:33",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But without further ado, welcome to the show, Liz.",
    "startTime": "00:33",
    "endTime": "00:35",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Thanks for having me, Victor.",
    "startTime": "00:35",
    "endTime": "00:37",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Good to be here.",
    "startTime": "00:37",
    "endTime": "00:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It's always a pleasure catching up with you.",
    "startTime": "00:38",
    "endTime": "00:40",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So I guess we should start with EBPF.",
    "startTime": "00:40",
    "endTime": "00:44",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And so I guess a good question to frame that is, what's EBPF, and why should I care?",
    "startTime": "00:44",
    "endTime": "00:50",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Sure.",
    "startTime": "00:51",
    "endTime": "00:51",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So you might think, oh, it's EBPF.",
    "startTime": "00:51",
    "endTime": "00:54",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "That sounds like an acronym.",
    "startTime": "00:54",
    "endTime": "00:55",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I want to know what it stands for.",
    "startTime": "00:55",
    "endTime": "00:57",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I can tell you it kind of used to stand for extended Berkeley packet filter, but you can honestly forget that, because, like, it does so much more than packet filtering.",
    "startTime": "00:57",
    "endTime": "01:08",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "What it lets you do is program the kernel so we can change the way the kernel behaves dynamically.",
    "startTime": "01:08",
    "endTime": "01:16",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And the reason why that's so powerful is that the kernel is involved with pretty much anything interesting that would do with computers.",
    "startTime": "01:16",
    "endTime": "01:24",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So the kernel is really the bit of the operating system that interfaces with hardware.",
    "startTime": "01:25",
    "endTime": "01:31",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So if you want to write to a file or, you know, get a network message or something like that, then the kernel is involved.",
    "startTime": "01:31",
    "endTime": "01:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "User space developers don't normally have to really think about it, but their programming languages are using these abstractions that call system calls that ask the kernel to do these things with hardware.",
    "startTime": "01:38",
    "endTime": "01:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "The kernel is also looking after things like permissions and privileges and coordinating multiple different processes.",
    "startTime": "01:52",
    "endTime": "01:59",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So if we can change the way the kernel behaves, we can use that to influence all sorts of things in the system.",
    "startTime": "02:00",
    "endTime": "02:09",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Really common use cases would be instrumenting events in the kernel to use that for observability security, because we can affect whether or not things are allowed to happen or not.",
    "startTime": "02:10",
    "endTime": "02:22",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So we can do some really cool dynamic security tooling and networking where we can essentially take network packets and kind of do whatever we want with them, possibly passing them back to the kernels networking stack, or possibly doing something.",
    "startTime": "02:22",
    "endTime": "02:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So tons of really cool kind of infrastructure level things that we can do with Ebbs.",
    "startTime": "02:40",
    "endTime": "02:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And if I'm not mistaken, the early days of, well, Ebbs claimed the fame really was Brendan Greggs at Netflix trying to debug firehose of data and traditional network diagnostic tools could really not cope with the volume of traffic that Netflix had even back then.",
    "startTime": "02:47",
    "endTime": "03:06",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And that's where it really started, if that is correct assessment or I.",
    "startTime": "03:06",
    "endTime": "03:10",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I.",
    "startTime": "03:10",
    "endTime": "03:10",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Mean, Brendan certainly was involved right from the early days and did some amazing work around using EBPF, that kind of observability for tracing, for performance, you know, measurements.",
    "startTime": "03:10",
    "endTime": "03:23",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, tons of really great work there.",
    "startTime": "03:23",
    "endTime": "03:25",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "In fact, behind me, I've got the poster for the EBPF documentary.",
    "startTime": "03:27",
    "endTime": "03:30",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Little plug for that.",
    "startTime": "03:31",
    "endTime": "03:32",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Alexei, who's at the top of the.",
    "startTime": "03:34",
    "endTime": "03:36",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "In the middle of that poster, Brendan is on there.",
    "startTime": "03:36",
    "endTime": "03:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "He's to the.",
    "startTime": "03:40",
    "endTime": "03:41",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "If we're looking at the screen, he's to the left of Alexei.",
    "startTime": "03:43",
    "endTime": "03:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So that's Brendan.",
    "startTime": "03:46",
    "endTime": "03:47",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Greg, Alexei's in the middle.",
    "startTime": "03:47",
    "endTime": "03:49",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And he was at.",
    "startTime": "03:49",
    "endTime": "03:51",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Well, what was Facebook back then?",
    "startTime": "03:51",
    "endTime": "03:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Meta now.",
    "startTime": "03:52",
    "endTime": "03:53",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And he had this kind of crazy idea to run programs in the.",
    "startTime": "03:54",
    "endTime": "04:01",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "In the kernel.",
    "startTime": "04:01",
    "endTime": "04:02",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "One of the consequences of meta being involved really early on is, yeah, again, things being done at massive scale.",
    "startTime": "04:02",
    "endTime": "04:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And every network packet that has been sent or received to Facebook or Instagram or whatever else since, I want to say, 2016 from memory, has all been processed by.",
    "startTime": "04:10",
    "endTime": "04:25",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Oh, wow.",
    "startTime": "04:25",
    "endTime": "04:26",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Which is massive.",
    "startTime": "04:26",
    "endTime": "04:28",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "That's.",
    "startTime": "04:29",
    "endTime": "04:29",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, that is pretty crazy.",
    "startTime": "04:30",
    "endTime": "04:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And,",
    "startTime": "04:31",
    "endTime": "04:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, so I think I first came across EBPF when there was, I believe, a Falco port into EBPF.",
    "startTime": "04:32",
    "endTime": "04:40",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And this must have been what, five, six years ago?",
    "startTime": "04:40",
    "endTime": "04:43",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Probably something like that.",
    "startTime": "04:43",
    "endTime": "04:44",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And that's when I started digging into EBPF and started playing a little bit with the tooling and got really interested.",
    "startTime": "04:45",
    "endTime": "04:50",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And then I've seen quite a few talks around that since.",
    "startTime": "04:50",
    "endTime": "04:52",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But you were, I believe you were at Aqua at the time, roughly, I believe.",
    "startTime": "04:53",
    "endTime": "04:58",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right.",
    "startTime": "04:58",
    "endTime": "04:59",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Was that your first exposure to EBPF around that time period or when did you start diving into that?",
    "startTime": "05:00",
    "endTime": "05:05",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So my first exposure to EBPF was seeing Thomas Graff, who I now work with at isovalent, presenting on psyllium at a docacon.",
    "startTime": "05:05",
    "endTime": "05:15",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And it was, I want to say 2017, might have even been 2016.",
    "startTime": "05:15",
    "endTime": "05:20",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I think it was 2017.",
    "startTime": "05:21",
    "endTime": "05:23",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I was doing a talk about how containers work, and Thomas was doing this talk in the same track about cilium and how it was using EBPF to do container networking.",
    "startTime": "05:23",
    "endTime": "05:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I remember thinking at the time, this is amazing, but back then, you needed a version of the kernel that was really cutting edge, that nobody, actually.",
    "startTime": "05:38",
    "endTime": "05:48",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "None of the cloud vendors had ran it.",
    "startTime": "05:48",
    "endTime": "05:50",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "05:50",
    "endTime": "05:50",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But I remember thinking at the time, this is going to be super interesting when people, you know, don't need to build their own kernel to try it out.",
    "startTime": "05:50",
    "endTime": "05:58",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And so I'd kind of been keeping my eye on it.",
    "startTime": "05:58",
    "endTime": "06:02",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And then when I was at AQA, one of my colleagues was talking about using EBPF.",
    "startTime": "06:02",
    "endTime": "06:08",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "He was actually doing some kind of postgrad project using EBPF on Android, but he had the idea that perhaps we could use it for security purposes.",
    "startTime": "06:08",
    "endTime": "06:21",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And yeah, around the same time, I think Falco was doing its port from kernel modules to EBPF, they still support both versions.",
    "startTime": "06:21",
    "endTime": "06:30",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And then, so we built Acqua, a project called Tracy.",
    "startTime": "06:31",
    "endTime": "06:35",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And then I spoke at the EBPF summit in 2020, which is surveillance organised.",
    "startTime": "06:38",
    "endTime": "06:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I kind of realized through that event that although I felt like I knew something about EBPF, my tip of the iceberg, when there was this enormous sort of additional amount of information and that all the experts in it, a lot of the experts, was a ton of expertise in isovalent.",
    "startTime": "06:46",
    "endTime": "07:08",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So that was the beginning of what has turned out to be a very fruitful conversation that we had back then about me getting involved with isovalent.",
    "startTime": "07:08",
    "endTime": "07:16",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Very nice.",
    "startTime": "07:17",
    "endTime": "07:18",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I guess it started as a diagnostics tool, but evolved into far more of a programming language and a vm in a sense, from a programming perspective.",
    "startTime": "07:18",
    "endTime": "07:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "To run.",
    "startTime": "07:31",
    "endTime": "07:32",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Talk to me a bit more about what you guys are doing right now at isoviolet with networking, routing and all these things around.",
    "startTime": "07:34",
    "endTime": "07:42",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Because, I mean, it started with diagnostics, relatively easy to wrap your head around, but now we're doing far more complicated things like building networking and zero trust networking models around EBPF on top of EBPF, I guess.",
    "startTime": "07:43",
    "endTime": "07:58",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Walk me through how that actually works and how well, basically the architect of how something can be accomplished using EBPF.",
    "startTime": "07:58",
    "endTime": "08:07",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Really?",
    "startTime": "08:07",
    "endTime": "08:07",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "08:07",
    "endTime": "08:08",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So the other character I should maybe point out from the poster on the other side, Alexei's right, is Daniel Balkman, who is at ISO Valent.",
    "startTime": "08:08",
    "endTime": "08:21",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And he saw Alexei's idea about this kind of virtual machine in the kernel.",
    "startTime": "08:21",
    "endTime": "08:29",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "He saw that being posted mailingly.",
    "startTime": "08:29",
    "endTime": "08:32",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I think the way it was originally presented was maybe a little bit much for the kernel community to absorb.",
    "startTime": "08:32",
    "endTime": "08:40",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But then you kind of looked at it and thought there's something really useful here.",
    "startTime": "08:40",
    "endTime": "08:44",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And he was involved in kernel networking and he, I guess, saw the potential for using EBPF on the networking side.",
    "startTime": "08:44",
    "endTime": "08:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So he worked with Alexei and they became the maintainers of the EBPF subsystem in the kernel at the time.",
    "startTime": "08:52",
    "endTime": "09:01",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I guess what Daniel could see, you know, what he was able to anticipate was we could intercept network packets and either manipulate them or drop them or redirect them in the kernel stack.",
    "startTime": "09:02",
    "endTime": "09:21",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So we can insert EBPF programs into a variety of different places in the networking stack and make decisions about what to do with the packets that we see.",
    "startTime": "09:22",
    "endTime": "09:31",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And for kernel, sorry for container networking, this is super interesting because of the way we create network namespaces for different containers.",
    "startTime": "09:32",
    "endTime": "09:43",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So you typically say you've got a container and a running on a host, the host has a network namespace and we typically put the container into its own network namespace.",
    "startTime": "09:44",
    "endTime": "09:57",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So if a packet comes, you know, it arrives over a physical interface into the host.",
    "startTime": "09:58",
    "endTime": "10:04",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It gets traditionally routed all the way through the host's networking stack.",
    "startTime": "10:04",
    "endTime": "10:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And then there's a virtual ethernet connection into the containers networking namespace where it then goes through the whole networking stack again to get to the application.",
    "startTime": "10:10",
    "endTime": "10:20",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And what we're able to do with EBPF is intercept the packet early on and say well I can see this is intended for the container, so rather than going all the way through the host network, I'll just send it directly to the virtual Ethernet connection and make that a much shorter part.",
    "startTime": "10:21",
    "endTime": "10:39",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So you replaced entire iptables because Docker container is basically our blackmagic around iptables essentially.",
    "startTime": "10:39",
    "endTime": "10:48",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right, which is very fragile in many.",
    "startTime": "10:48",
    "endTime": "10:50",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Ways and can be a performance hit, particularly in a dynamic world like kubernetes where we're just creating and destroying IP addresses all the time.",
    "startTime": "10:50",
    "endTime": "11:02",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And those require IP tables to be rewritten.",
    "startTime": "11:03",
    "endTime": "11:07",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "The way iptables works, they have to be rewritten.",
    "startTime": "11:08",
    "endTime": "11:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "One change, the entire table has to be rewritten.",
    "startTime": "11:11",
    "endTime": "11:14",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Doesn't scale very well.",
    "startTime": "11:15",
    "endTime": "11:16",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But we, yeah, we can bypass all that with ciliate.",
    "startTime": "11:17",
    "endTime": "11:20",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Okay.",
    "startTime": "11:20",
    "endTime": "11:21",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And then we also get the option to look at those packets and say, use it for network policy so we can make decisions about dropping packets if they don't comply with the network policy.",
    "startTime": "11:21",
    "endTime": "11:34",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So right from the really early day, you know, that initial demo that I saw Thomas doing back in 2020 2017 was about network policies and the ability to drop packets and build these powerful network policies very easily.",
    "startTime": "11:34",
    "endTime": "11:50",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "11:50",
    "endTime": "11:51",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I guess the two questions that comes to mind around docker networking, what networking in a Kubernetes or cloud native workload is.",
    "startTime": "11:51",
    "endTime": "11:59",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "The first one is you can explain the fiscal routing to the container, but how would you do in a zero trust world, vm to vm routing?",
    "startTime": "12:00",
    "endTime": "12:13",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Is that something that's covered by users?",
    "startTime": "12:13",
    "endTime": "12:14",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Because that would be, I guess, how do you see that?",
    "startTime": "12:15",
    "endTime": "12:18",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I guess in the upfront world, can you do host to host communication within that framework as well?",
    "startTime": "12:18",
    "endTime": "12:23",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "12:24",
    "endTime": "12:24",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So if we think about you have to have a network connecting to machine and, you know, we're not involved at the physical layer, but everything kind of above that we can be involved in.",
    "startTime": "12:24",
    "endTime": "12:41",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Silium's vision is really to enable all networking, you know, any workload to connect to any other workload without having to worry about whether it's in Kubernetes or on a legacy machine or where it is from.",
    "startTime": "12:42",
    "endTime": "12:58",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, in a kind of naive way, they're just IP addresses.",
    "startTime": "12:59",
    "endTime": "13:05",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Now we might have to know how that IP address matches to a particular endpoint, but provided we know how to route to that IP address, we can.",
    "startTime": "13:05",
    "endTime": "13:14",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Why can we not?",
    "startTime": "13:15",
    "endTime": "13:16",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We can do that, but we can be quite sophisticated about knowing what all these different endpoints are having.",
    "startTime": "13:18",
    "endTime": "13:25",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Network policies, understanding things at layer seven as well.",
    "startTime": "13:25",
    "endTime": "13:31",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So we could be doing things like domain name based network policies and API aware network policies.",
    "startTime": "13:31",
    "endTime": "13:41",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So for example, GRPC policies that are able to interpret different GRPC requests or HTTP requests only allow posts to this particular endpoint.",
    "startTime": "13:41",
    "endTime": "13:58",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "13:59",
    "endTime": "13:59",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So are you able to do, I guess, encryption as well when you do node to node communication in the EBPF layer?",
    "startTime": "14:01",
    "endTime": "14:08",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So you can actually do TL's directly in the EBPF layer?",
    "startTime": "14:08",
    "endTime": "14:11",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Well, the way we typically do it is to leverage either wireguard or iPsec.",
    "startTime": "14:11",
    "endTime": "14:17",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, there's that old saying about don't roll your own crypto, so.",
    "startTime": "14:18",
    "endTime": "14:22",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But we can do that again very efficiently, the way I'm more familiar with wireguard than I am with Ipsec kind of implementation layer.",
    "startTime": "14:25",
    "endTime": "14:36",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And wireguard presents itself as a virtual network interface, much like the way that containers present a virtual Ethernet interface.",
    "startTime": "14:36",
    "endTime": "14:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So from a silium perspective, we can configure these interfaces and send packets.",
    "startTime": "14:46",
    "endTime": "14:55",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We're making choices about where to send packets, which to use a wireguard interface.",
    "startTime": "14:55",
    "endTime": "15:02",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Okay, that makes a lot of sense.",
    "startTime": "15:04",
    "endTime": "15:06",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "One of the things that I got very excited about in the Kubernetes world in the early days, not so early days, but was istio?",
    "startTime": "15:07",
    "endTime": "15:15",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And that is a project that had a lot of promise.",
    "startTime": "15:15",
    "endTime": "15:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Everybody was really excited about it, but it kind of fell flat.",
    "startTime": "15:19",
    "endTime": "15:23",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I know there are a lot of people who did implement it, but I haven't heard many success stories but didn't include a lot of engineers on page of duty twenty four seven to monitor it.",
    "startTime": "15:23",
    "endTime": "15:35",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Is that kind of the alternative to what you're looking at, or how do you see istio fitting in together with this?",
    "startTime": "15:36",
    "endTime": "15:44",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Or they're completely unrelated.",
    "startTime": "15:44",
    "endTime": "15:46",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "15:46",
    "endTime": "15:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So it is really interesting when we think about what is a service mesh?",
    "startTime": "15:46",
    "endTime": "15:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And if you ask two different people, you will get two different.",
    "startTime": "15:52",
    "endTime": "15:55",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "What you want from a service mesh depends on your requirements, your environment and what have you.",
    "startTime": "15:56",
    "endTime": "16:02",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But really what service meshes are about is let's make sure applications can speak to each other.",
    "startTime": "16:02",
    "endTime": "16:09",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, maybe there's some load balancing involved.",
    "startTime": "16:09",
    "endTime": "16:12",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Maybe there's some, you know, things like rolling out load balancing between different versions of a particular service.",
    "startTime": "16:12",
    "endTime": "16:19",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I remember when, early on when I joined isurveillant talking to Thomas and he was saying, you know, we already have like 80% of a service mesh because, you know, we already have encryption, we already have load balancing.",
    "startTime": "16:19",
    "endTime": "16:34",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Really, the only bit at that point we didn't have was ingress.",
    "startTime": "16:35",
    "endTime": "16:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And we now support ingress, and we now support gateway API Kubernetes world as the kind of scalable big brother to ingress.",
    "startTime": "16:38",
    "endTime": "16:49",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And the advantage that we have in the cilian world is that we're covering all the layers of the networking stack.",
    "startTime": "16:51",
    "endTime": "16:59",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So Istio has kind of had to build additional resources to represent these kind of concepts that are really networking based that we can kind of handle within the networking stack.",
    "startTime": "16:59",
    "endTime": "17:18",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So we think about, you know, our vision of just being able to connect everything to everything.",
    "startTime": "17:19",
    "endTime": "17:23",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "There's enough information in a gateway API definition to tell us, well, okay, this request is supposed to be sent to this particular type of backend.",
    "startTime": "17:25",
    "endTime": "17:36",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And we already had Kubernetes services, we already had the ability to load balance across them.",
    "startTime": "17:36",
    "endTime": "17:41",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It's a relatively small lift to go from that to what people are calling a service mesh today.",
    "startTime": "17:42",
    "endTime": "17:50",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So, yeah, I mean, when people say, okay, we're running istio, how can we, you know, can psyllium do this in a more lightweight way?",
    "startTime": "17:51",
    "endTime": "18:01",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, the answer is yes.",
    "startTime": "18:02",
    "endTime": "18:04",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Do we reproduce all the cilium resource types?",
    "startTime": "18:04",
    "endTime": "18:06",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "No.",
    "startTime": "18:06",
    "endTime": "18:07",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "All the istio resource types?",
    "startTime": "18:07",
    "endTime": "18:09",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "No, we don't.",
    "startTime": "18:09",
    "endTime": "18:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Do we use.",
    "startTime": "18:11",
    "endTime": "18:12",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I guess the other point about it is the way that well, the way that we can avoid using.",
    "startTime": "18:12",
    "endTime": "18:23",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So there's a new thing called ambient mesh coming into istio, but let's just park that for a moment and talk about traditional istio, where it uses sidecars in every pod.",
    "startTime": "18:25",
    "endTime": "18:39",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And there are a few sort of downsides to sidecars that apply.",
    "startTime": "18:39",
    "endTime": "18:45",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Whether we're talking about service mesh or any other kind of instrumentation, you have to get the sidecar container into your pod, which basically means restarting the pod.",
    "startTime": "18:47",
    "endTime": "18:59",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So your instrumentation and your application lifecycle start being tightly coupled.",
    "startTime": "18:59",
    "endTime": "19:05",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You have to be confident that the, all the pods are actually instrumented correctly, that the container is being injected, whether that's in CI CD or some kind of webhook, it's got to happen, whereas if we can do everything at the EBPF layer, we only have to instrument the host, we don't have to instrument every single individual pod.",
    "startTime": "19:08",
    "endTime": "19:30",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So that saves us lots of resources.",
    "startTime": "19:30",
    "endTime": "19:32",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It means we don't have to modify running pods.",
    "startTime": "19:32",
    "endTime": "19:36",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We can just enable features in the kind of using EBPF in the kernel layer and in the cilium agent, and it just works for existing running application.",
    "startTime": "19:36",
    "endTime": "19:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "The other cool thing is if you have a proxy running inside the pod, so we use the same proxy, we use envoy, which is the same proxy that IsDA.",
    "startTime": "19:53",
    "endTime": "20:07",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "20:07",
    "endTime": "20:08",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But instead of having one inside every single pod, we have one per host.",
    "startTime": "20:08",
    "endTime": "20:13",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "In the sidecar model, every single packet has to traverse through the proxy and then out of the pod, whereas not every packet necessarily needs to be terminated.",
    "startTime": "20:13",
    "endTime": "20:29",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "If you've got a layer three packet or you've got a udp, you don't necessarily need to have gone through a proxy.",
    "startTime": "20:29",
    "endTime": "20:37",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So we can avoid going to the proxy if it's not necessary.",
    "startTime": "20:37",
    "endTime": "20:41",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And if you imagine you have two pods on the same host, if they're communicating with each other, it's going through two proxies in this sidecar model, because there's a sidecar in each pod, whereas if we've just got one proxy on the host, we only have to go through the proxy once, if at all.",
    "startTime": "20:42",
    "endTime": "21:02",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "21:03",
    "endTime": "21:03",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So the performance is really quite significantly improved.",
    "startTime": "21:04",
    "endTime": "21:08",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "How do you deal with, I guess, attestation and workload identity?",
    "startTime": "21:09",
    "endTime": "21:12",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Because that's two of the things that istio does, right?",
    "startTime": "21:12",
    "endTime": "21:15",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Because that's the MTLs or zero trust element of istio.",
    "startTime": "21:15",
    "endTime": "21:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right.",
    "startTime": "21:19",
    "endTime": "21:20",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "If you're running a single, like one of the benefits, I guess, of running a sidecar is that you can tie tightly couple the identity with the workload, whereas if you're running on the host, I guess you have less tight mapping, I guess.",
    "startTime": "21:20",
    "endTime": "21:35",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "How are you thinking about that?",
    "startTime": "21:36",
    "endTime": "21:37",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, so one point about MTLs is absolutely, a lot of people have a requirement for all traffic to be encrypted at rest and in flight.",
    "startTime": "21:37",
    "endTime": "21:53",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So you want to know that all connections are encrypted.",
    "startTime": "21:53",
    "endTime": "21:56",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "MTLS is not the only hammer for the encryption now.",
    "startTime": "21:57",
    "endTime": "22:00",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "22:01",
    "endTime": "22:01",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We talked about wireguard and Ipsec earlier.",
    "startTime": "22:02",
    "endTime": "22:04",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So for a lot of use cases, if what you're looking for is encrypted traffic, you don't actually need mtls from workload to.",
    "startTime": "22:05",
    "endTime": "22:14",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "22:15",
    "endTime": "22:15",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "You do want mtls or something like it.",
    "startTime": "22:15",
    "endTime": "22:20",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "If you are actually wanting to cryptographically verify the identities at either end of that connection.",
    "startTime": "22:20",
    "endTime": "22:26",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And if you do, then mtls is one way of solving that problem.",
    "startTime": "22:27",
    "endTime": "22:32",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "What we've done in silium is separate out the kind of handshake part that happens when you upgrade TCP connector.",
    "startTime": "22:33",
    "endTime": "22:45",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "The TL's, we've separated that from the encryption part.",
    "startTime": "22:45",
    "endTime": "22:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So what we actually do is have the agent at either end use a spiffy identity.",
    "startTime": "22:52",
    "endTime": "23:00",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We're using spiffy Spire to get the cryptographic identity for each workload.",
    "startTime": "23:00",
    "endTime": "23:05",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "The agent actually does that handshake on behalf of the work.",
    "startTime": "23:06",
    "endTime": "23:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And if that handshake is successful, we then allow traffic to pass and we can use wireguard as the encryption mechanism.",
    "startTime": "23:12",
    "endTime": "23:22",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So the encryption and the identity verification are kind of separated out.",
    "startTime": "23:22",
    "endTime": "23:28",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I see, I see.",
    "startTime": "23:29",
    "endTime": "23:29",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But you still run some kind of PKI, then, within the cluster or within the workload as part of your agent server agent model, I guess.",
    "startTime": "23:29",
    "endTime": "23:39",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "23:39",
    "endTime": "23:40",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We built this with a kind of pluggable API for the identity mechanism.",
    "startTime": "23:40",
    "endTime": "23:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "The out of the box solution is spiffy Spire, but it could be something else, right?",
    "startTime": "23:46",
    "endTime": "23:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You could plug into your cloud based PKI if you wanted to, I presume.",
    "startTime": "23:52",
    "endTime": "23:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Or.",
    "startTime": "23:56",
    "endTime": "23:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, I mean, whether or not there's actually an implementation today against that API is, you know.",
    "startTime": "23:56",
    "endTime": "24:03",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, but at the end of the day, it's x 509 at the end of the day, right?",
    "startTime": "24:03",
    "endTime": "24:06",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, yeah.",
    "startTime": "24:06",
    "endTime": "24:06",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It's standard.",
    "startTime": "24:06",
    "endTime": "24:07",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I.",
    "startTime": "24:07",
    "endTime": "24:08",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Cool.",
    "startTime": "24:09",
    "endTime": "24:10",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Let me take a step back and talk more about, I guess, security of EBPF.",
    "startTime": "24:10",
    "endTime": "24:15",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Obviously, you mentioned already there was a lot of reluctance in accepting this into the kernel from earlier, for obvious reason.",
    "startTime": "24:16",
    "endTime": "24:22",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Because now you can execute code from use space inside the kernel, which opens a pandora's box of attack vectors, I guess.",
    "startTime": "24:22",
    "endTime": "24:30",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "What have you seen around that?",
    "startTime": "24:31",
    "endTime": "24:33",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Obviously, it must be reliable vm if it has made it into the mainline kernel.",
    "startTime": "24:33",
    "endTime": "24:38",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "There are a lot of paranormal people auditing that code before it makes it there.",
    "startTime": "24:38",
    "endTime": "24:41",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "What do you make of that?",
    "startTime": "24:42",
    "endTime": "24:43",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And how do you see that?",
    "startTime": "24:43",
    "endTime": "24:44",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Well, yeah, so the important thing about EBPF is it goes through this process of verification before the program is allowed to be, or as the program is loaded into the kernel, it gets verified, and if it doesn't pass verification, the kernel rejects it.",
    "startTime": "24:44",
    "endTime": "25:01",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Now, what verification does is it ensures that memory access is safe, it ensures that programs will complete, that it can't crash.",
    "startTime": "25:02",
    "endTime": "25:12",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, we're checking every single memory access to make sure there aren't any null pointed dereferences and things like that.",
    "startTime": "25:12",
    "endTime": "25:21",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So that gives us some guarantees about the program being able to run successfully.",
    "startTime": "25:22",
    "endTime": "25:32",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Can't bring down what we can't do with the verifier is tell the difference between a malicious EBPF program and a, you know, a well meaning EBPF program.",
    "startTime": "25:32",
    "endTime": "25:45",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So a really great example is dropping packets.",
    "startTime": "25:45",
    "endTime": "25:48",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, I might want to drop network packets because I'm enforcing a network policy, or if I'm a bad actor, I might want to drop network packets.",
    "startTime": "25:49",
    "endTime": "25:58",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "To mess with your traffic and verify has no way of knowing what my intent was when I wrote a program to drop certain network.",
    "startTime": "25:58",
    "endTime": "26:07",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So this is where, you know, the provenance of your EBPF program is super important.",
    "startTime": "26:09",
    "endTime": "26:15",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You need to trust your supplier of that program that the thing you're running is going to be, you know, well intentioned.",
    "startTime": "26:16",
    "endTime": "26:27",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "26:27",
    "endTime": "26:28",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So supply chain security and mining and all that kind of thing.",
    "startTime": "26:28",
    "endTime": "26:34",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Now you can absolutely do the kind of normal supply chain security around user space agents that typically come with an I application.",
    "startTime": "26:35",
    "endTime": "26:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So say, for example, if you're running silium, you don't actually have to get involved in the nitty gritty of loading and unloading EBPF programs into the kernel.",
    "startTime": "26:46",
    "endTime": "26:55",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "There's user space agents to do that for you, right?",
    "startTime": "26:55",
    "endTime": "26:59",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But if we're talking about a particular EBPF program and trying to have the kernel validate its provenance, you might think, well, can't you just sign the program?",
    "startTime": "27:02",
    "endTime": "27:14",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "The problem is you can't because as you load the program into the kernel, it's actually getting adjusted by the user space loader to make sure that the bytecode in the kernel matches the data structure pile once run every.",
    "startTime": "27:14",
    "endTime": "27:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So it means because you're actually adjusting the instructions as you kind of load them in the program, that you end up loading into the kernel is not the same as the kernel, as the program that you would delivered, you know, you downloaded from wherever you downloaded it, or that you compiled.",
    "startTime": "27:38",
    "endTime": "28:00",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So you can't just cite, or you can't then have the kernel check a signature matches like a hash of the instructions because the instructions have changed.",
    "startTime": "28:00",
    "endTime": "28:11",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So this is quite an interesting challenge for the UBPF kernel community at the moment.",
    "startTime": "28:12",
    "endTime": "28:19",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And there are a few proposals around.",
    "startTime": "28:19",
    "endTime": "28:23",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "There's one I'm aware of where they're essentially validating the that the user space agent that does the loading is signed and as expected, but having that verified.",
    "startTime": "28:24",
    "endTime": "28:43",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "From within, because, I mean, it sounds like EBV is the ultimate bad actor toolkit in the sense, because you could essentially obfuscate or hide the content or like a line in the shadows file or password file or even SSH configured and inject all kind of roadmap backdoors that you would never see from user space because it's intercepted and obfuscated.",
    "startTime": "28:43",
    "endTime": "29:08",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "We even obfuscate.",
    "startTime": "29:08",
    "endTime": "29:10",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Like, I've heard of attacks where they compromise, like the LS command, for instance, so it doesn't output what you expect it to output and actually hides files and whatnot.",
    "startTime": "29:10",
    "endTime": "29:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So I guess it's an interesting attack vector that's kind of new for this.",
    "startTime": "29:19",
    "endTime": "29:23",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, yeah.",
    "startTime": "29:23",
    "endTime": "29:24",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I mean, there's definitely, with great power comes great responsibility.",
    "startTime": "29:24",
    "endTime": "29:30",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "There are tons of interesting new types of attack that you could build with EBPF.",
    "startTime": "29:30",
    "endTime": "29:37",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You can use EBPF to kind of monitor and observe EBPF.",
    "startTime": "29:37",
    "endTime": "29:43",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "29:43",
    "endTime": "29:43",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So use EBPF to see what other EBPF programs are loaded, for example.",
    "startTime": "29:44",
    "endTime": "29:50",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Becomes very meta.",
    "startTime": "29:50",
    "endTime": "29:52",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, definitely.",
    "startTime": "29:52",
    "endTime": "29:54",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But you can also get into a bit of an arms race there where you need the, you know, if the attacker kind of gets in there first, they might be able to obfuscate themselves.",
    "startTime": "29:54",
    "endTime": "30:06",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, it's kind of like you want to know that the colonel that you boot is the colonel that you intended to be.",
    "startTime": "30:07",
    "endTime": "30:16",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Right?",
    "startTime": "30:16",
    "endTime": "30:17",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Oh, we kind of got that with secure boot in a way.",
    "startTime": "30:17",
    "endTime": "30:20",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right.",
    "startTime": "30:20",
    "endTime": "30:20",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But now, I guess EBPF, in a sense, incompatible with secure boot, because it kind of makes it void in a sense, I guess because.",
    "startTime": "30:20",
    "endTime": "30:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, yeah.",
    "startTime": "30:31",
    "endTime": "30:31",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I don't know whether there are, you know, you want to be the first EBPF.",
    "startTime": "30:31",
    "endTime": "30:42",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Your EBPF monitoring code needs to be the first EBPF code loaded.",
    "startTime": "30:42",
    "endTime": "30:47",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So whether.",
    "startTime": "30:47",
    "endTime": "30:48",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, part of your.",
    "startTime": "30:48",
    "endTime": "30:49",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I think there's more work to be done in that area.",
    "startTime": "30:52",
    "endTime": "30:55",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "30:56",
    "endTime": "30:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I think, I mean, there's probably a big opportunity for the falcos of the world, right, to do IDs on the EBPF level and monitor all these bad actors.",
    "startTime": "30:57",
    "endTime": "31:07",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I guess that brings me to an interesting question that I've been pondering.",
    "startTime": "31:07",
    "endTime": "31:11",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I've seen a lot on social media lately, the need for, I guess, antivirus in a traditional sense, more in the Linux world that we've been blessed for not having to worry about for decades now.",
    "startTime": "31:11",
    "endTime": "31:25",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But given things that transpired in the last few weeks, we're starting to get to a point where actually maybe we do need to think about these things again, and maybe that is something to do with EBPF.",
    "startTime": "31:25",
    "endTime": "31:37",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "What do you think?",
    "startTime": "31:38",
    "endTime": "31:38",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So I feel like I need to mention the cilium project called tetragon, which is kind of like the next generation of Falco.",
    "startTime": "31:39",
    "endTime": "31:50",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So tetragon actually instruments some lower level functions within the kernel.",
    "startTime": "31:50",
    "endTime": "31:58",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So Falco is instrumenting.",
    "startTime": "31:58",
    "endTime": "32:00",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "System calls tetragon is instrumenting, sort of some well known locations within the kernel, but the maintain.",
    "startTime": "32:00",
    "endTime": "32:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So there are some reasons why that's actually more secure than the way that Falco does syscall attachment.",
    "startTime": "32:10",
    "endTime": "32:17",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But the real improvement is that tetragon can filter events within the.",
    "startTime": "32:18",
    "endTime": "32:23",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So Falco, the EBPF code is going to tell you, let's say you're looking for file open events.",
    "startTime": "32:24",
    "endTime": "32:31",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So it will report all of those file open events and then in user space filter out the ones that match the policy.",
    "startTime": "32:31",
    "endTime": "32:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "32:39",
    "endTime": "32:39",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "With Tetragon, it's actually pushing the policy into the kernel.",
    "startTime": "32:40",
    "endTime": "32:44",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So you do the filtering in kernel, you end up sending a much much reduced set of events to user space, and therefore you get incredibly low overhead.",
    "startTime": "32:44",
    "endTime": "32:58",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I think if you're using Falco with a significant set of policies, you will really know the overhead.",
    "startTime": "32:58",
    "endTime": "33:05",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I want to say there was a benchmark that the Tetragon team did.",
    "startTime": "33:06",
    "endTime": "33:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I'm terrible at remembering numbers, but I'm pretty sure that the Falco implementation with some single digit percentage cpu and tetragon equivalent was like 0.1.",
    "startTime": "33:10",
    "endTime": "33:23",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Oh wow.",
    "startTime": "33:23",
    "endTime": "33:23",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "That is a significant improvement.",
    "startTime": "33:23",
    "endTime": "33:25",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yes.",
    "startTime": "33:25",
    "endTime": "33:25",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "The other thing I wanted to cover was obviously the XE vulnerability attack, or supply chain security attack that happened.",
    "startTime": "33:28",
    "endTime": "33:35",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Well, we're recording this on April 5.",
    "startTime": "33:35",
    "endTime": "33:37",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I don't know when this would go live, but this has transpired at last, I guess week now.",
    "startTime": "33:37",
    "endTime": "33:42",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I was curious about the blog post that was on Isobelan's blog about detecting this vulnerability.",
    "startTime": "33:42",
    "endTime": "33:49",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I was curious about the technical side of that, how that actually, how you, how do you detect that, those vulnerabilities or those.",
    "startTime": "33:50",
    "endTime": "33:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "That injection, I guess.",
    "startTime": "33:56",
    "endTime": "33:57",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "33:57",
    "endTime": "33:58",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So that's using Tetragon.",
    "startTime": "33:58",
    "endTime": "34:00",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I haven't looked at the blog post in enough detail to know exactly what events it's looking for.",
    "startTime": "34:00",
    "endTime": "34:05",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But I think it's a really good example of how within really short space of time of that vulnerability being known, were able to write a policy.",
    "startTime": "34:05",
    "endTime": "34:17",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It's just a policy.",
    "startTime": "34:17",
    "endTime": "34:18",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We didn't have to change Tetragon.",
    "startTime": "34:18",
    "endTime": "34:19",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We wrote a policy that detects and inform.",
    "startTime": "34:20",
    "endTime": "34:23",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Seeing that xe.",
    "startTime": "34:25",
    "endTime": "34:27",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, I mean, because that's.",
    "startTime": "34:30",
    "endTime": "34:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It is something that I think.",
    "startTime": "34:31",
    "endTime": "34:33",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I mean, supply chain security, as you alluded to before, is a massive field that is evolving quickly.",
    "startTime": "34:33",
    "endTime": "34:39",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I guess we're not quite ready for it, to be honest, in the open source world, because you start to see more and more of these state sponsored attack vectors, attacks against the open source community and open source libraries maintained by a single guy like the open SL attack springs to mind, where there are like three people on the planet that actually understands its source code and they're all working as volunteers on these projects.",
    "startTime": "34:39",
    "endTime": "35:06",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Where's your head around this in terms of future of the industry, really, like supply chain security?",
    "startTime": "35:06",
    "endTime": "35:11",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, I mean, as well as the sort of individuals who are involved and the fact there is, how do you keep track of what each individual is doing?",
    "startTime": "35:11",
    "endTime": "35:21",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "There's also just the sheer scale, the number of different possible dependencies that people have out there.",
    "startTime": "35:21",
    "endTime": "35:26",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "35:27",
    "endTime": "35:27",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I think, I mean, I've been saying for a really long time now that I think runtime security is really the important part of this.",
    "startTime": "35:27",
    "endTime": "35:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So, I mean, I definitely believe in defence in depth, you know, don't get me wrong, the supply chain security stuff is incredible, incredibly important.",
    "startTime": "35:38",
    "endTime": "35:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But what we really want to be able to do is detect malicious behavior or unexpected behavior at runtime, this whole kind of ids idea.",
    "startTime": "35:46",
    "endTime": "35:56",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I think if we contrast this with networking, everybody has run firewalls, you know, enforcing network traffic drops for decades.",
    "startTime": "35:56",
    "endTime": "36:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I'm going to say, you know, it's not a new thing to have a firewall that will enforce your network policy.",
    "startTime": "36:10",
    "endTime": "36:17",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "In the runtime world we seem to be, or in the kind of program execution world, there's a lot more hesitancy about this idea that like, well, if we try to spot something doing something malicious, we might inadvertently also catch, you know, expected behavior, and then we're going to get in the way of our programs and we're going to cause more problems than we solve.",
    "startTime": "36:19",
    "endTime": "36:44",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And also the overhead concern about if we're going to monitor everything that our programs are doing, is there going to be any cpu left to actually do anything?",
    "startTime": "36:45",
    "endTime": "36:53",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I think this is where EVPF is proving to be incredibly powerful with implementations like Tetragon.",
    "startTime": "36:55",
    "endTime": "37:03",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Because if we can find a way to express what intent, what, you know, what's intended in a much better, we don't want.",
    "startTime": "37:03",
    "endTime": "37:14",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "A lot of this has been done with like Seccomp and trying to interpret this at the syscall layer, and who knows which syscall.",
    "startTime": "37:14",
    "endTime": "37:23",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, if you're writing a web application, you have no idea which syscalls you're intending to call, but what you probably do know is things like whether you're expecting to talk to a database and what domain names you're expecting to communicate with, and what files you're expecting to access.",
    "startTime": "37:23",
    "endTime": "37:41",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "If you get a read on your password file from your python library, there's probably a red flag there.",
    "startTime": "37:41",
    "endTime": "37:46",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Exactly.",
    "startTime": "37:46",
    "endTime": "37:47",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "37:47",
    "endTime": "37:48",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So if we can express those policies in ways that make sense to humans, that we can say it's a set of files I'm happy to access here's the set of domain names I'm happy to access eventually, not just tell me if we see activity outside of these bounds, actually just prevent it, and then that's something new that we can do with tetragon.",
    "startTime": "37:48",
    "endTime": "38:13",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "In the EBPF world until now, we've had the ability to send an event to user space and say, oh, I think this is malicious, and then have user space go, this is a malicious process, so I'm going to kill the process.",
    "startTime": "38:13",
    "endTime": "38:26",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But by that time it's done asynchronously, so bad things would have already happened.",
    "startTime": "38:26",
    "endTime": "38:33",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "38:33",
    "endTime": "38:33",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "With hechagon, we can intercept those, you know, let's say it's a file open or a socket open.",
    "startTime": "38:34",
    "endTime": "38:39",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We don't like the look of it.",
    "startTime": "38:39",
    "endTime": "38:40",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It doesn't match policy.",
    "startTime": "38:40",
    "endTime": "38:42",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We can actually kill the process synchronously from within the kernel.",
    "startTime": "38:42",
    "endTime": "38:47",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So that's his call.",
    "startTime": "38:47",
    "endTime": "38:48",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Never gets a chance.",
    "startTime": "38:48",
    "endTime": "38:49",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And it's much more powerful.",
    "startTime": "38:50",
    "endTime": "38:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And yeah, if we can express the policies in a meaningful way, I think that's the future of security.",
    "startTime": "38:52",
    "endTime": "38:59",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "There's probably like a piratu rule at play there as well, where you could probably block 80% of attacks with just a very small subset of blocks, really.",
    "startTime": "39:00",
    "endTime": "39:11",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right.",
    "startTime": "39:11",
    "endTime": "39:12",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Because there are some common behaviors like your go library on your web server or your app server is unlikely to need to open a socket or whatever it may be.",
    "startTime": "39:12",
    "endTime": "39:20",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right.",
    "startTime": "39:20",
    "endTime": "39:21",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "For a backdoor or something like that.",
    "startTime": "39:21",
    "endTime": "39:22",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right.",
    "startTime": "39:22",
    "endTime": "39:23",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I think, and many attacks, if they're intended to exfiltrate data in any way, they're going to have to do some kind of network act or maybe they're going to have to write a file to somebody's thumb drive or something.",
    "startTime": "39:24",
    "endTime": "39:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But it's definitely, they need to get it out somehow.",
    "startTime": "39:38",
    "endTime": "39:42",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "39:42",
    "endTime": "39:43",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Should be possible to write policies that contain what we expect to happen.",
    "startTime": "39:44",
    "endTime": "39:51",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I guess an argument for that approach is code obfuscation is becoming crazy good with AI these days.",
    "startTime": "39:52",
    "endTime": "40:00",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "There are so many ways to obfuscate code today that you can't write a regex to fix this.",
    "startTime": "40:02",
    "endTime": "40:08",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It's near impossible because AI will think of ways to, obviously things that nobody's ever thought about, and it can do it unique per payload for a million payloads.",
    "startTime": "40:09",
    "endTime": "40:20",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right?",
    "startTime": "40:20",
    "endTime": "40:20",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "40:20",
    "endTime": "40:21",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But the underlying way it needs to either read data or send or write data is essentially the same.",
    "startTime": "40:22",
    "endTime": "40:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right.",
    "startTime": "40:31",
    "endTime": "40:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So I would agree.",
    "startTime": "40:31",
    "endTime": "40:32",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I think that playbook probably is a lot more sound to catch a lot of issues rather than trying to do it on a more tailored basis.",
    "startTime": "40:32",
    "endTime": "40:41",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I guess.",
    "startTime": "40:41",
    "endTime": "40:42",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So.",
    "startTime": "40:43",
    "endTime": "40:44",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I guess what you're saying, what you're thinking is ids is the new antivirus for the Linux world, I guess in EBF's user space.",
    "startTime": "40:44",
    "endTime": "40:53",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, yeah.",
    "startTime": "40:54",
    "endTime": "40:55",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I mean, I don't know whether we'll continue using the terms like ids and whether or not that has the right, you know, doesn't necessarily leave people with the right kind of sense of excitement and power that they need.",
    "startTime": "40:56",
    "endTime": "41:12",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, I mean it is funny that this comes up, I see at least a few times a year when we do at skinny, when we do like security audits or security surveys for customers.",
    "startTime": "41:13",
    "endTime": "41:23",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And it's so often that you come up like what's your antivirus vendor for your Linux servers?",
    "startTime": "41:23",
    "endTime": "41:28",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I was like, I don't have one.",
    "startTime": "41:28",
    "endTime": "41:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But that's still, I've heard this conversation from plenty of friends of mine who are ctos for companies that do sell to enterprise, that they end up installing some McAfee garbage on their service purely to make the buyers happy.",
    "startTime": "41:33",
    "endTime": "41:49",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Not because it actually solves the problem, but because it's just the path least resistance to get them off your back, get compliance off your back.",
    "startTime": "41:49",
    "endTime": "41:56",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "This is a problem with all sorts of things in the security world where there's a set of compliance checklists and people just want to know that you've ticked the box.",
    "startTime": "41:57",
    "endTime": "42:08",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Whether or not that's sensible, meaningful or sensible thing.",
    "startTime": "42:08",
    "endTime": "42:13",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It's a bit like the password change rules.",
    "startTime": "42:13",
    "endTime": "42:16",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, everybody has known for years that you shouldn't ask humans to change their passwords because they'll just fall into a pattern that makes it easier to identify what their password is.",
    "startTime": "42:16",
    "endTime": "42:27",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And yet there are still, you know, organizations out there that will require, you know, Microsoft.",
    "startTime": "42:27",
    "endTime": "42:34",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "42:35",
    "endTime": "42:35",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Really?",
    "startTime": "42:38",
    "endTime": "42:38",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, I mean it largely come back to these compliance framework.",
    "startTime": "42:39",
    "endTime": "42:44",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Now we have a new NIST framework which hopefully I haven't read the new Nist one in depth, but hopefully that's gonna debunk some of the myths, particularly around password because I think that password reset and the password strength, I think that derives from the first NIST standard, which is what, 1520 years old by now?",
    "startTime": "42:44",
    "endTime": "43:01",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Well, at least ten years old.",
    "startTime": "43:01",
    "endTime": "43:02",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I think you're right.",
    "startTime": "43:02",
    "endTime": "43:02",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I think that has been, certainly some of the compliance frameworks have wised up to that.",
    "startTime": "43:03",
    "endTime": "43:08",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Well, you would hope.",
    "startTime": "43:08",
    "endTime": "43:09",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Well, now even like Sboms is part of the new, I believe, part of, at least alluded to in the NiST two framework.",
    "startTime": "43:09",
    "endTime": "43:15",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I believe so at least that's up a little bit there.",
    "startTime": "43:15",
    "endTime": "43:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And maybe that's something I have covered in the past on previous episodes.",
    "startTime": "43:20",
    "endTime": "43:25",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But I'm curious about your view of the s bomb world because that's everybody talks about sbom these worlds these days and it's the cool thing to talk about, but I'm curious, where is your head around that and how do you see s bombs fixing supply chain security?",
    "startTime": "43:25",
    "endTime": "43:40",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, I mean it's a world that I'm less close to now in what I'm doing these days.",
    "startTime": "43:41",
    "endTime": "43:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But from what I can see there's some good work being done.",
    "startTime": "43:46",
    "endTime": "43:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I suppose I do worry a little bit that we'll come up with all these amazing ways of enumerating every possible piece of software and doing all these.",
    "startTime": "43:54",
    "endTime": "44:05",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It's all about dependency management and vulnerability management.",
    "startTime": "44:07",
    "endTime": "44:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But all of that work will always take time.",
    "startTime": "44:12",
    "endTime": "44:15",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And if that distracts people from thinking about but what about the runtime then, you know, I totally understand why supply chain security has had the attention it had, you know, but the materials is an essential part of that thinking.",
    "startTime": "44:15",
    "endTime": "44:35",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But I do worry a little bit that we might be, you know, I can't think of there's a, you know, an idiom, a cliche about, you know, looking over here because, you know.",
    "startTime": "44:36",
    "endTime": "44:50",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Right.",
    "startTime": "44:50",
    "endTime": "44:51",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Being distracted from the real.",
    "startTime": "44:51",
    "endTime": "44:53",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "44:53",
    "endTime": "44:54",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I mean if it's purely an exercise about collecting this for the sake of collecting it, then I completely agree with you that if it's not actionable, it's kind of pointless, I guess.",
    "startTime": "44:54",
    "endTime": "45:04",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "45:04",
    "endTime": "45:04",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I think people worry about like false positives and just being overwhelmed and.",
    "startTime": "45:04",
    "endTime": "45:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, well that's a massive one, right.",
    "startTime": "45:10",
    "endTime": "45:13",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "In like it's trivial to pull an S bomb from most software stacks today.",
    "startTime": "45:13",
    "endTime": "45:17",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It's pretty trivial to correlate that SBom file with some CV database and then you get a list of oh, your vulnerable three is 20 cv's but in reality you probably not, you're probably vulnerable to like maybe one of them if like many of them are going to be false positives, right?",
    "startTime": "45:17",
    "endTime": "45:37",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, I think there's some interesting work.",
    "startTime": "45:37",
    "endTime": "45:39",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "One of my ex colleagues from ACWA has a startup called Backslash where they're analyzing which of those vulnerabilities are actually reachable in your application.",
    "startTime": "45:39",
    "endTime": "45:53",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I'm sure there are other startups doing similar work and then there's also the approach of, you know like Docker Slim having a smaller image so that.",
    "startTime": "45:53",
    "endTime": "46:03",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, you know, the smaller it is, the smaller the likelihood that you have that dependency and reducing cv's that way.",
    "startTime": "46:03",
    "endTime": "46:10",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So there's definitely, you know, interesting things that can be done there.",
    "startTime": "46:10",
    "endTime": "46:16",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "But yeah, it is currently, at least I haven't played, I haven't seen that tool, but currently it's very much a manual effort of like, oh, we actually are not using this function that's affected by the CV, so therefore it's kind of moot.",
    "startTime": "46:17",
    "endTime": "46:30",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, but path least resistant, you should just upgrade it and not have to worry about it.",
    "startTime": "46:30",
    "endTime": "46:36",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Right?",
    "startTime": "46:36",
    "endTime": "46:36",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "46:36",
    "endTime": "46:36",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I guess over the last few years, you know, we've seen a lot of auto remediation.",
    "startTime": "46:37",
    "endTime": "46:41",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, press this button and GitHub will update the dependencies for you, that kind of thing.",
    "startTime": "46:41",
    "endTime": "46:47",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It's good.",
    "startTime": "46:47",
    "endTime": "46:48",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Absolutely.",
    "startTime": "46:49",
    "endTime": "46:50",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Absolutely.",
    "startTime": "46:50",
    "endTime": "46:50",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "No, I think that's, I don't think it's a good thing that we have more security oriented thinking at least.",
    "startTime": "46:50",
    "endTime": "46:58",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And supply chain is actually making the realms in popular press even today.",
    "startTime": "46:58",
    "endTime": "47:04",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Almost the last thing I wanted to chat a bit about is compliance because I know you guys obviously work a lot with regulated industries where you need to make sure that you are compliant.",
    "startTime": "47:04",
    "endTime": "47:16",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "How do you find a bit of the dichotomy, I guess, that we spoke about before between checking all the boxes whereas actually solving security.",
    "startTime": "47:16",
    "endTime": "47:26",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "How have you found those when you're working with these real life customers, in particular in financial services where they are heavily regulated and all that, or how you found working in that world?",
    "startTime": "47:27",
    "endTime": "47:38",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I guess.",
    "startTime": "47:38",
    "endTime": "47:38",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah.",
    "startTime": "47:39",
    "endTime": "47:39",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It is obviously a, you know, a front of mind challenge for people in these regulated industries.",
    "startTime": "47:41",
    "endTime": "47:49",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "How do I make my environment compliant?",
    "startTime": "47:49",
    "endTime": "47:52",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Can I, do, you know, can I use kubernetes?",
    "startTime": "47:52",
    "endTime": "47:55",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "You know, if I do this, will I still be compliant?",
    "startTime": "47:55",
    "endTime": "47:58",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So on and so forth.",
    "startTime": "47:58",
    "endTime": "48:00",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "We didn't talk about this beforehand, but this is going to sound as though we talked about it and I wanted to plug because we isurveillant and our friends at control plane came together and we've recently written a white paper about how you use cilium in a Kubernetes environment to meet a lot of these compliance requirements around things like trust to do configuring policies.",
    "startTime": "48:00",
    "endTime": "48:27",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, it kind of maps different requirements to some of those like NIST framework table of requirements.",
    "startTime": "48:27",
    "endTime": "48:41",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So there's some great work gone in there by my colleagues.",
    "startTime": "48:41",
    "endTime": "48:45",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, Andy was actually the first guest on the show.",
    "startTime": "48:46",
    "endTime": "48:48",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So full circle.",
    "startTime": "48:48",
    "endTime": "48:50",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yes, we talk about a lot of these things, but not necessarily around regulated industry.",
    "startTime": "48:50",
    "endTime": "48:55",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But yeah, I find it interesting when you deal with these regulated industry because we get across a fair bit of them as well.",
    "startTime": "48:55",
    "endTime": "49:02",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And it's, yeah, it's old meets the new because they want to be bleeding edge, but they are held back by a lot of these old methodologies, I guess, in a sense, and from these frameworks.",
    "startTime": "49:03",
    "endTime": "49:16",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "But yeah, I'm looking forward to taking a look at the white paper.",
    "startTime": "49:16",
    "endTime": "49:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "I'll probably chuck that into the description of the episode as well, if people are nerd out about that.",
    "startTime": "49:19",
    "endTime": "49:24",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I think we've covered a lot of good ground today.",
    "startTime": "49:25",
    "endTime": "49:29",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Is there anything else you want to cover?",
    "startTime": "49:29",
    "endTime": "49:31",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Anything you think we missed that's worthwhile for viewers to think about or be aware of or other than plugging your book, of course.",
    "startTime": "49:31",
    "endTime": "49:39",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Oh, there we go.",
    "startTime": "49:39",
    "endTime": "49:40",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "49:40",
    "endTime": "49:41",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I guess the other thing that we didn't talk about is Cisco.",
    "startTime": "49:43",
    "endTime": "49:46",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Oh, yes.",
    "startTime": "49:46",
    "endTime": "49:47",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "At time of recording, Isobelan is, you know, undergoing its acquisition.",
    "startTime": "49:48",
    "endTime": "49:53",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So it was announced before Christmas and hasn't closed yet, but hopefully very soon.",
    "startTime": "49:53",
    "endTime": "49:59",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And I guess quite a lot of people have been asking about, you know, what.",
    "startTime": "49:59",
    "endTime": "50:03",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "What does the acquisition mean for, like, facilium and for isovalent customers and for isovalent employees as well.",
    "startTime": "50:03",
    "endTime": "50:12",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And so I'm really excited about it because basically the whole team is moving as one into Cisco in the security business group security business.",
    "startTime": "50:12",
    "endTime": "50:25",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "And we get to carry on doing what we're doing.",
    "startTime": "50:26",
    "endTime": "50:28",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "So we're going to carry on supporting silium.",
    "startTime": "50:28",
    "endTime": "50:32",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "I know Cisco is super excited about the open source work that we do and really supportive about that.",
    "startTime": "50:32",
    "endTime": "50:39",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah, it's like we get to carry on being isovalent, but we have the resources.",
    "startTime": "50:40",
    "endTime": "50:47",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "It sounds like a good strategic fit for Cisco.",
    "startTime": "50:51",
    "endTime": "50:53",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "And I guess that would mean quite a few more trips to Milpitas for you then, I guess.",
    "startTime": "50:53",
    "endTime": "50:57",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Yeah, I guess I'll find out after close.",
    "startTime": "50:59",
    "endTime": "51:01",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Yeah.",
    "startTime": "51:01",
    "endTime": "51:02",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Excellent.",
    "startTime": "51:03",
    "endTime": "51:03",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "All right.",
    "startTime": "51:03",
    "endTime": "51:04",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Thank you so much for coming on the show, Liz.",
    "startTime": "51:04",
    "endTime": "51:07",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Very much appreciate it.",
    "startTime": "51:07",
    "endTime": "51:08",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "It's been a lot of fun, and I have learned a lot more new things about EBPF, and I'm very much happy for that.",
    "startTime": "51:08",
    "endTime": "51:15",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "So thank you much for coming on the show, and have a good one.",
    "startTime": "51:15",
    "endTime": "51:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Thanks.",
    "startTime": "51:19",
    "endTime": "51:19",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Thank you very much for having me.",
    "startTime": "51:19",
    "endTime": "51:20",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  },
  {
    "sentence": "Cheers.",
    "startTime": "51:21",
    "endTime": "51:21",
    "speaker_name": "Viktor Petersson",
    "speaker_id": 0
  },
  {
    "sentence": "Bye.",
    "startTime": "51:21",
    "endTime": "51:21",
    "speaker_name": "Liz Rice",
    "speaker_id": 1
  }
]
